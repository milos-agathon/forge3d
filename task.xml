<task>
  <title>Remediate failed criteria only</title>

  <inputs>
    <repoRoot>.</repoRoot>
    <paths>
      <!-- Tests -->
      <path>tests/test_numpy_interop.py</path>
      <path>tests/test_memory_budget.py</path>
      <!-- Python helpers/tools -->
      <path>python/forge3d/_validate.py</path>
      <path>python/tools/profile_copies.py</path>
      <!-- Rust product code -->
      <path>src/lib.rs</path>
      <path>src/core/memory_tracker.rs</path>
      <!-- Docs + changelog -->
      <path>docs/index.rst</path>
      <path>docs/interop_zero_copy.rst</path>
      <path>docs/memory_budget.rst</path>
      <path>CHANGELOG.md</path>
    </paths>
  </inputs>

  <plan>
    <!-- Safety -->
    <step>Create branch <code>wsM-remediate</code>; exclude <code>target/ dist/ build/ .venv/ node_modules/ .git/</code> from edits.</step>

    <!-- Fix M1: zero-copy hooks + tests + profiler -->
    <step>In <code>src/lib.rs</code>, add minimal hooks if missing:
      <ul>
        <li><code>pub fn render_triangle_rgba_with_ptr(py) -&gt; (PyArray3&lt;u8&gt;, usize)</code> returning the PyArray and its data pointer.</li>
        <li>Store height input pointer during <code>add_terrain()</code> in <code>debug_last_height_src_ptr: usize</code> and expose <code>pub fn debug_last_height_src_ptr(&self) -&gt; usize</code>.</li>
      </ul>
    </step>
    <step>Update <code>tests/test_numpy_interop.py</code> to assert:
      <ul>
        <li>RGBA zero-copy: <code>np_arr.ctypes.data == ptr</code> from <code>render_triangle_rgba_with_ptr()</code>.</li>
        <li>Height zero-copy: for C-contig float32 input, <code>height.ctypes.data == r.debug_last_height_src_ptr()</code>.</li>
      </ul>
    </step>
    <step>Move helper files to canonical paths and import:
      <ul>
        <li><code>git mv ./_validate.py python/forge3d/_validate.py</code></li>
        <li><code>git mv ./profile_copies.py python/tools/profile_copies.py</code></li>
      </ul>
    </step>
    <step>Modify <code>python/tools/profile_copies.py</code> to print exactly <b>zero-copy OK</b> on success and emit no warnings in that case.</step>

    <!-- Fix M2: memory accounting + tests -->
    <step>In <code>src/lib.rs</code>, on readback resize: call <code>free_buffer_allocation(old_size, true)</code> before tracking the new size; in any temporary readback path (e.g., height debug readback), free after unmap.</step>
    <step>Ensure budget checks use additional host-visible bytes (delta) when resizing to avoid false positives; preserve error message tokens “current”, “requested”, “limit”.</step>
    <step>If absent, add <code>Renderer::get_memory_metrics()</code> to return the registry metrics to Python.</step>
    <step>Finish <code>tests/test_memory_budget.py</code>:
      <ul>
        <li>Validate metrics fields and <code>within_budget</code> for a small render.</li>
        <li>Trigger &gt;512&nbsp;MiB host-visible (oversized readback) and assert an error is raised; message contains “current”, “requested”, “limit”.</li>
      </ul>
    </step>

    <!-- Docs + changelog -->
    <step>Update <code>docs/index.rst</code> to include <code>interop_zero_copy</code> and <code>memory_budget</code> in the toctree.</step>
    <step>Add concise “Workstream M – interop &amp; memory” entry to <code>CHANGELOG.md</code> summarizing hooks, tests, profiler, budget metrics, and docs.</step>

    <!-- Verification -->
    <step>Build: <code>maturin develop --release</code>.</step>
    <step>Run tests: <code>pytest -q -k "numpy_interop or memory_budget"</code> then full <code>pytest -q</code>.</step>
    <step>Docs: <code>make -C docs html</code> and verify both pages appear in the sidebar TOC.</step>
    <step>Profiler: <code>python python/tools/profile_copies.py --render-size 64x64</code> prints exactly "zero-copy OK".</step>
  </plan>

  <deliverables>
    <item>Zero-copy hooks in <code>src/lib.rs</code> and finished pointer tests in <code>tests/test_numpy_interop.py</code>.</item>
    <item>Helpers/tools in correct paths; <code>python/tools/profile_copies.py</code> prints “zero-copy OK”.</item>
    <item>Memory accounting corrections in <code>src/lib.rs</code>; finished <code>tests/test_memory_budget.py</code>.</item>
    <item>Docs TOC wired in <code>docs/index.rst</code>.</item>
    <item>CHANGELOG updated for Workstream M.</item>
  </deliverables>

  <acceptanceCriteria>
    <item>M1: RGBA and height zero-copy pointer assertions pass under <code>pytest -q -k numpy_interop</code>.</item>
    <item>M1: <code>python/tools/profile_copies.py</code> prints exactly “zero-copy OK” with no warnings.</item>
    <item>M2: <code>get_memory_metrics()</code> returns required fields; small scene within budget; exceeding 512&nbsp;MiB host-visible raises an error containing “current”, “requested”, “limit”.</item>
    <item>Docs: <code>make -C docs html</code> exits 0 and both pages appear in TOC.</item>
    <item>Runbook: <code>maturin develop --release</code> and <code>pytest -q</code> exit 0.</item>
  </acceptanceCriteria>

  <safety>
    <rule>Branch creation; small, reviewable commits; no blind search/replace.</rule>
    <rule>Limit edits to listed files; exclude build/binary dirs.</rule>
    <rule>Respect ≤512&nbsp;MiB host-visible budget; use oversized readback only in the exceedance test.</rule>
  </safety>

  <constraints>
    <platforms>win_amd64; linux_x86_64; macos_universal2</platforms>
    <memory>≤ 512 MiB host-visible heap</memory>
    <toolchain>cmake≥3.24; cargo/rustc stable; PyO3; VMA</toolchain>
    <apis>WebGPU/WGSL primary; Vulkan 1.2-compatible design</apis>
  </constraints>

  <completion>
    <summary>Add the missing hooks, finish/relocate tests and tools, correct memory accounting, wire docs TOC, and update CHANGELOG so all ACs pass.</summary>
    <commands>
      <cmd>git checkout -b wsM-remediate</cmd>
      <cmd>git mv _validate.py python/forge3d/_validate.py</cmd>
      <cmd>git mv profile_copies.py python/tools/profile_copies.py</cmd>
      <cmd>maturin develop --release</cmd>
      <cmd>pytest -q -k "numpy_interop or memory_budget"</cmd>
      <cmd>pytest -q</cmd>
      <cmd>make -C docs html</cmd>
      <cmd>python python/tools/profile_copies.py --render-size 64x64</cmd>
    </commands>
  </completion>
</task>
