<Task name="A1.1 — Repository & Build Sanity for vulkan-forge">
  <Context>
    You are operating on the repository root of **vulkan-forge**.
    The goal of A1.1 is that **everyone can build and run the starter consistently**. 
    Acceptance: running the example produces `triangle.png`, and version pins are committed (a Rust toolchain pin is optional). 
    Also document the minimal toolchains (macOS CLT, Windows MSVC Build Tools, Python 3.10–3.12). :contentReference[oaicite:6]{index=6}
  </Context>

  <Goal>
    Implement A1.1 by:
    1) Ensuring the crate builds locally with `maturin develop --release` on common dev OSes.
    2) Providing bootstrap scripts that set up a venv, install maturin, build the wheel, and run a smoke test that writes `triangle.png`.
    3) Pinning dependency versions and (optionally) Rust toolchain.
    4) Updating the README with clear, minimal instructions and prerequisites.
  </Goal>

  <Edits>
    <!-- 1) Dependency & build hygiene -->
    <File path="Cargo.toml" intent="Pin PyO3/wgpu/numpy and enable abi3 for Python 3.10+">
      <!-- Adjust the [dependencies] section; keep any unrelated deps unchanged. -->
      <EnsureContains><![CDATA[
[dependencies]
pyo3 = { version = "0.21.2", features = ["extension-module", "abi3-py310"] }
numpy = "0.21"
wgpu = "0.19"
pollster = "0.3"
image = "0.25"
      ]]></EnsureContains>
      <RemoveIfPresent>
        pyo3 = { version = "0.20"
        pyo3 = { version = "0.22"
        numpy = "0.20"
        numpy = "0.22"
      </RemoveIfPresent>
    </File>

    <File path="pyproject.toml" intent="Make maturin config explicit (bindings, module path)">
      <EnsureContains><![CDATA[
[build-system]
requires = ["maturin>=1.9"]
build-backend = "maturin"

[tool.maturin]
bindings = "pyo3"
python-source = "python"
module-name = "vulkan_forge._vulkan_forge"
features = []
strip = true
      ]]></EnsureContains>
    </File>

    <!-- Optional toolchain pinning to reduce cross-dev variance -->
    <File path="rust-toolchain.toml" intent="Optional: pin to stable channel" create="if-missing">
      <Content><![CDATA[
[toolchain]
channel = "stable"
      ]]></Content>
    </File>

    <File path=".gitignore" intent="Ignore build and venv artifacts">
      <EnsureContains><![CDATA[
/target
/.venv
*.pyd
*.so
triangle.png
      ]]></EnsureContains>
    </File>

    <!-- 2) Developer bootstrap & smoke test -->
    <File path="scripts/dev/smoke_test.py" intent="Import, render, verify file exists" create="true">
      <Content><![CDATA[
import sys, pathlib
from pathlib import Path

try:
    from vulkan_forge import Renderer
except Exception as e:
    print("IMPORT_FAIL:", e)
    sys.exit(2)

out = Path("triangle.png")
r = Renderer(512, 512)
arr = r.render_triangle_rgba()   # should return HxWx4 uint8
r.render_triangle_png(str(out))
if not out.exists():
    print("RENDER_FAIL: triangle.png was not created")
    sys.exit(3)
print("OK: triangle.png written, array shape:", getattr(arr, "shape", None))
      ]]></Content>
    </File>

    <File path="scripts/dev/bootstrap.sh" intent="UNIX bootstrap: venv + build + smoke" create="true" mode="+x">
      <Content><![CDATA[
#!/usr/bin/env bash
set -euo pipefail
python3 -m venv .venv
source .venv/bin/activate
python -m pip install -U pip maturin
maturin develop --release
python scripts/dev/smoke_test.py
      ]]></Content>
    </File>

    <File path="scripts/dev/bootstrap.ps1" intent="Windows bootstrap: venv + build + smoke" create="true">
      <Content><![CDATA[
$ErrorActionPreference = "Stop"
py -m venv .venv
.\.venv\Scripts\Activate.ps1
python -m pip install -U pip maturin
maturin develop --release
python scripts/dev/smoke_test.py
      ]]></Content>
    </File>

    <!-- 3) README updates per A1.1 deliverables -->
    <File path="README.md" intent="Add Quick Start + prerequisites + A1.1 acceptance">
      <EnsureContains><![CDATA[
## Quick Start

```bash
# macOS/Linux
./scripts/dev/bootstrap.sh
# Windows (PowerShell)
.\scripts\dev\bootstrap.ps1
````

This will create a virtualenv, install `maturin`, build the Rust extension, and run a smoke test that writes `triangle.png`.

## Prerequisites

* Python 3.10–3.12 recommended (local dev); a 3.13 build may work via abi3.
* macOS: Xcode Command Line Tools
* Windows: MSVC Build Tools (C++ workload)
* Linux: build-essential, a Vulkan-capable driver

## Acceptance for A1.1

* `maturin develop --release` completes on macOS, Linux, and Windows.
* `python -m examples.triangle` (or `scripts/dev/smoke_test.py`) produces `triangle.png`.
* Version pins committed; `rust-toolchain.toml` is optional.
  ]]></EnsureContains> </File> </Edits>

  <Commands shell="bash">
    <Run>git add -A</Run>
    <Run>git commit -m "A1.1: repo build sanity — pins, bootstrap scripts, README, smoke test"</Run>
  </Commands>

  <Acceptance>
    <Criterion>Running `./scripts/dev/bootstrap.sh` (UNIX) or `.\scripts\dev\bootstrap.ps1` (Windows) completes successfully and prints "OK: triangle.png written…".</Criterion>
    <Criterion>`python -m examples.triangle` produces `triangle.png` as stated in A1.1 acceptance. :contentReference[oaicite:7]{index=7}</Criterion>
    <Criterion>README lists minimal toolchains and Python versions (3.10–3.12) as requested in A1.1 deliverables. :contentReference[oaicite:8]{index=8}</Criterion>
  </Acceptance>

  <Notes>
    - Keep `pyo3` and the Rust `numpy` crate on the same minor line to avoid `links = "python"` conflicts (we pin both to 0.21).
    - If a dev uses Python 3.13 locally, the `abi3-py310` feature generally works; otherwise advise a 3.10–3.12 venv.
    - A Rust toolchain pin is optional per A1.1 but reduces variance across machines.
  </Notes>

</Task>