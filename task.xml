<task>
  <title>Remediate failed criteria only</title>

  <inputs>
    <repoRoot>.</repoRoot>
    <paths>
      <!-- C1 path fix -->
      <path>src/code/gpu_types.rs</path>
      <path>src/code/mod.rs</path>
      <path>src/core/</path>

      <!-- C2/C3 test placement -->
      <path>test_c2_png_regression.py</path>
      <path>test_c3_device_caps.py</path>
      <path>tests/</path>

      <!-- C4 docs + test -->
      <path>color_management.md</path>
      <path>docs/index.rst</path>
      <path>docs/</path>
      <path>tests/test_tonemap.py</path>
      <path>src/shaders/terrain.wgsl</path>
    </paths>
    <constraints>
      <platforms>win_amd64; linux_x86_64; macos_universal2</platforms>
      <memory>≤ 512 MiB host-visible heap</memory>
      <toolchain>cmake≥3.24; cargo/rustc stable; PyO3; VMA</toolchain>
      <apis>WebGPU/WGSL primary; Vulkan 1.2-compatible design</apis>
      <docs>Sphinx preferred</docs>
    </constraints>
  </inputs>

  <plan>
    <!-- Safety -->
    <step>Create branch <code>wsC-verify-remediate</code>. Exclude <code>target/ dist/ build/ .venv/ node_modules/ .git/</code> from edits.</step>

    <!-- C1: Fix module paths to match deliverables -->
    <step>If not present, ensure <code>src/core/</code> exists. Move <code>src/code/gpu_types.rs</code> → <code>src/core/gpu_types.rs</code> via <code>git mv</code>.</step>
    <step>Move <code>src/code/mod.rs</code> → <code>src/core/mod.rs</code> (create or merge if <code>src/core/mod.rs</code> exists) so that it exports <code>pub mod framegraph;</code> and <code>pub mod gpu_types;</code>.</step>
    <step>Remove now-empty <code>src/code/</code>. Verify <code>lib.rs</code> compiles with <code>mod core;</code> and references <code>core::*</code> still resolve.</step>

    <!-- C2/C3: Place tests where pytest discovers them -->
    <step>Create <code>tests/</code> if missing; <code>git mv</code> <code>test_c2_png_regression.py</code> → <code>tests/test_c2_png_regression.py</code>.</step>
    <step><code>git mv</code> <code>test_c3_device_caps.py</code> → <code>tests/test_c3_device_caps.py</code>.</step>

    <!-- C4: Docs location + TOC -->
    <step>Create <code>docs/</code> if missing. <code>git mv</code> <code>color_management.md</code> → <code>docs/color_management.md</code>.</step>
    <step>Append <code>color_management</code> into the Sphinx TOC in <code>docs/index.rst</code> under a toctree. Do not alter other sections.</step>

    <!-- C4: Add missing tonemap test -->
    <step>Add <code>tests/test_tonemap.py</code> that: (1) defines CPU <code>reinhard()</code> and <code>gamma_correct()</code>, (2) renders a tiny scene (e.g., 32×32), (3) asserts fragment output is in [0,255], and (4) checks that enabling/removing tonemap path changes average luminance as expected (threshold-based, not exact byte match).</step>

    <!-- Verification -->
    <step>Build: <code>maturin develop --release</code>.</step>
    <step>Tests: <code>pytest -q</code> (confirm all three testsuites run under <code>tests/</code>).</step>
    <step>Docs: <code>make -C docs html</code> and confirm <code>color_management</code> appears in the built TOC.</step>
  </plan>

  <deliverables>
    <item>C1: <code>src/core/gpu_types.rs</code> exists; <code>src/core/mod.rs</code> exports <code>gpu_types</code> and <code>framegraph</code>; no <code>src/code/</code> remnants.</item>
    <item>C2: <code>tests/test_c2_png_regression.py</code> present and collected by pytest.</item>
    <item>C3: <code>tests/test_c3_device_caps.py</code> present and collected by pytest.</item>
    <item>C4: <code>docs/color_management.md</code> present and referenced from <code>docs/index.rst</code>.</item>
    <item>C4: <code>tests/test_tonemap.py</code> added and passing.</item>
  </deliverables>

  <acceptanceCriteria>
    <item>C1: Repository builds after moving modules; <code>cargo build</code> (via <code>maturin develop --release</code>) succeeds.</item>
    <item>C2/C3: <code>pytest -q</code> shows both tests discovered under <code>tests/</code> and passing.</item>
    <item>C4-Docs: <code>make -C docs html</code> exits 0 and the sidebar/TOC includes “Color Management &amp; Tonemap Pipeline”.</item>
    <item>C4-Tests: <code>pytest -q -k tonemap</code> exits 0 and reports at least one assertion validating tonemap effect (brightness threshold) has passed.</item>
  </acceptanceCriteria>

  <safety>
    <rule>Create branch; small commits per step; no blind search/replace.</rule>
    <rule>Only touch the files listed in <paths>; keep shader/engine logic unchanged.</rule>
    <rule>Exclude build/binary dirs from edits: <code>target/ dist/ build/ .venv/ node_modules/ .git/</code>.</rule>
  </safety>

  <constraints>
    <platforms>win_amd64; linux_x86_64; macos_universal2</platforms>
    <memory>≤ 512 MiB host-visible heap</memory>
    <toolchain>cmake≥3.24; cargo/rustc stable; PyO3; VMA</toolchain>
    <apis>WebGPU/WGSL primary; Vulkan 1.2-compatible design</apis>
    <docs>Sphinx preferred</docs>
  </constraints>

  <completion>
    <summary>Remediated Workstream C verification gaps: fixed C1 pathing; placed tests; added tonemap test; moved docs and registered TOC; verified build/tests/docs.</summary>
    <commands>
      <cmd>git checkout -b wsC-verify-remediate</cmd>
      <cmd>git mv src/code/gpu_types.rs src/core/gpu_types.rs</cmd>
      <cmd>git mv src/code/mod.rs src/core/mod.rs</cmd>
      <cmd>git rm -r src/code || true</cmd>
      <cmd>mkdir -p tests docs</cmd>
      <cmd>git mv test_c2_png_regression.py tests/test_c2_png_regression.py</cmd>
      <cmd>git mv test_c3_device_caps.py tests/test_c3_device_caps.py</cmd>
      <cmd>git mv color_management.md docs/color_management.md</cmd>
      <cmd>maturin develop --release</cmd>
      <cmd>pytest -q</cmd>
      <cmd>make -C docs html</cmd>
    </commands>
  </completion>
</task>
