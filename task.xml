<task>
  <title>Remediate failed criteria only</title>
  <inputs>
    <repoRoot>.</repoRoot>
    <paths>
      <path>examples/perf/split_vs_single_bg.rs</path>
      <path>examples/perf/split_vs_single_bg.py</path>
      <path>shaders/perf/single_bg.wgsl</path>
      <path>shaders/perf/split_bg.wgsl</path>
      <path>shaders/include/big_buffer.wgsl</path>
      <path>src/core/big_buffer.rs</path>
      <path>src/core/mod.rs</path>
      <path>tests/wsI_i7_big_buffer.rs</path>
      <path>bench/upload_policies/policies.rs</path>
      <path>ci/run_benches.sh</path>
      <path>docs/workstreams/I/I6_bg_churn.md</path>
      <path>docs/workstreams/I/I9_upload_policies.md</path>
    </paths>
    <workstream>I – Bind Groups, Big Buffer, Double Buffering, Upload Policies</workstream>
    <platforms>win_amd64, linux_x86_64, macos_universal2</platforms>
  </inputs>

  <plan>
    <!-- I6: Add minimal Python wrapper & doc to run the perf example and emit CSV -->
    <step id="I6-1">Create <file>examples/perf/split_vs_single_bg.py</file> that parses args (--frames, --out), shells out to the Rust example via subprocess, and validates the resulting CSV exists and has required columns.</step>
    <step id="I6-2">Author <file>docs/workstreams/I/I6_bg_churn.md</file> describing the experiment, exact run command, expected CSV schema (config, frame_ms, delta_ms), and interpretation.</step>

    <!-- I7: Add missing test implementing perf + visual parity -->
    <step id="I7-1">Add <file>tests/wsI_i7_big_buffer.rs</file>: constructs a 10k-object scene; runs two paths (legacy per-object bind group vs BigBuffer under <feature>wsI_bigbuf</feature>); measures CPU time; renders the same frame(s) and compares pixels (exact match or SSIM≥0.99). Feature-detect to skip BigBuffer path if feature off, and run both modes in CI by toggling features.</step>

    <!-- I9: Add CI bench script and doc; ensure artifact written -->
    <step id="I9-1">Create <file>ci/run_benches.sh</file> (POSIX shell) that: (a) builds benches in release, (b) runs <code>bench/upload_policies/policies.rs</code> producing <file>artifacts/perf/I9_upload_policies.md</file>, (c) echoes the artifact path for CI upload, and (d) runs again with <env>FORGE3D_UPLOAD_POLICY=UseCopyEncoder</env> to verify env override is honored (different mode reported in MD).</step>
    <step id="I9-2">Author <file>docs/workstreams/I/I9_upload_policies.md</file> summarizing policies, how to run the bench, and where CI publishes the MD.</step>
  </plan>

  <deliverables>
    <item>I6: examples/perf/split_vs_single_bg.py</item>
    <item>I6: docs/workstreams/I/I6_bg_churn.md</item>
    <item>I7: tests/wsI_i7_big_buffer.rs</item>
    <item>I9: ci/run_benches.sh</item>
    <item>I9: docs/workstreams/I/I9_upload_policies.md</item>
  </deliverables>

  <acceptanceCriteria>
    <!-- I6 -->
    <criterion id="I6-AC1">Running:
      <code>RUST_LOG=info cargo run --example split_vs_single_bg --release -- --frames 600 --out artifacts/perf/I6_bg_churn.csv</code>
      produces <file>artifacts/perf/I6_bg_churn.csv</file> with columns: <code>config, frame_ms, delta_ms</code>, ≥600 rows.</criterion>

    <!-- I7 -->
    <criterion id="I7-AC1">With legacy path (default) vs BigBuffer (<code>--features wsI_bigbuf</code>), the test <file>tests/wsI_i7_big_buffer.rs</file> runs and reports ≥25% reduction in CPU submission time at 10k objects (median of ≥3 runs).</criterion>
    <criterion id="I7-AC2">Visual parity: the test compares rendered outputs and either exact-matches or achieves SSIM ≥ 0.99 between legacy and BigBuffer paths.</criterion>
    <criterion id="I7-AC3">Both builds compile: <code>cargo test --release</code> (legacy) and <code>cargo test --release --features wsI_bigbuf</code> succeed.</criterion>

    <!-- I9 -->
    <criterion id="I9-AC1"><code>ci/run_benches.sh</code> exits 0 and creates <file>artifacts/perf/I9_upload_policies.md</file> with MB/s and CPU time for each policy.</criterion>
    <criterion id="I9-AC2">Running the script with <env>FORGE3D_UPLOAD_POLICY=UseCopyEncoder</env> shows this mode in the MD output.</criterion>
  </acceptanceCriteria>

  <safety>
    <branch>fix/ws-I-remediate-minimal</branch>
    <commitStrategy>small, atomic commits per step (I6, I7, I9)</commitStrategy>
    <excludeDirs>target/, dist/, build/, .venv/, __pycache__/</excludeDirs>
    <searchReplacePolicy>No blind search/replace; only targeted edits in listed paths.</searchReplacePolicy>
    <reviewGates>
      <gate>Run rustfmt/clippy on touched Rust files.</gate>
      <gate>Run a local Sphinx build for added docs pages only.</gate>
    </reviewGates>
  </safety>

  <constraints>
    <gpuHostVisibleBudgetMiB>512</gpuHostVisibleBudgetMiB>
    <toolchain>cmake>=3.24, cargo/rustc, PyO3, VMA</toolchain>
    <apis>WebGPU/WGSL primary; Vulkan 1.2 compatible design</apis>
    <platforms>win_amd64, linux_x86_64, macos_universal2</platforms>
  </constraints>

  <completion>
    <summary>All missing Workstream I deliverables added; tests/docs/benches runnable; acceptance criteria validated locally.</summary>
    <verify>
      <cmd>I6: RUST_LOG=info cargo run --example split_vs_single_bg --release -- --frames 600 --out artifacts/perf/I6_bg_churn.csv</cmd>
      <cmd>I7 (legacy): cargo test --release --test wsI_i7_big_buffer</cmd>
      <cmd>I7 (BigBuffer): cargo test --release --features wsI_bigbuf --test wsI_i7_big_buffer</cmd>
      <cmd>I9: bash ci/run_benches.sh</cmd>
      <cmd>I9 (env override): FORGE3D_UPLOAD_POLICY=UseCopyEncoder bash ci/run_benches.sh</cmd>
      <cmd>Docs (local): sphinx-build -b html docs/ docs/_build/html</cmd>
    </verify>
  </completion>
</task>
