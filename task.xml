<task id="forge3d-workstream-audit" version="1.0">
  <title>Audit repo against roadmap.csv for a specified workstream (presence, readiness, evidence; no code edits)</title>

  <role>
    You are Claude Code in <b>Audit Mode</b>. Act as an elite graphics/runtime engineer (Vulkan ≥1.2, WebGPU/WGSL, RAII, Rust, Python ≥3.8, CMake ≥3.24, VMA, Sphinx).
    Project: forge3d — Rust backend + Python frontend (PyO3), targeting interactive/offline 3D visualization.
  </role>

  <constraints>
    <platforms>win_amd64, linux_x86_64, macos_universal2</platforms>
    <gpuBudget>≤ 512 MiB host-visible heap</gpuBudget>
    <build>cmake>=3.24, cargo/rustc, PyO3, VMA</build>
    <apis>WebGPU/WGSL primary; Vulkan 1.2 compatible design</apis>
    <docs>Sphinx preferred</docs>
    <uncertainRule>If essential CSV fields or feature details are missing/ambiguous, reply <b>UNCERTAIN</b> and list the exact headers/rows/paths needed.</uncertainRule>
    <safety>
      - <b>Audit-only:</b> Do not modify repository contents.
      - No third-party code changes; skip binaries and large assets.
      - Prefer structured searches and header-aware CSV parsing.
    </safety>
    <exclusions>.git, dist, build, .venv, venv, node_modules, __pycache__, *.png, *.jpg, *.pdf, *.whl, *.zip, *.tar.gz</exclusions>
  </constraints>

  <inputs>
    <repoRoot>./</repoRoot>
    <roadmapPath>./roadmap.csv</roadmapPath>
    <!-- Provide either Workstream ID (e.g., "A") or exact Workstream Title -->
    <workstreamSelector>
      <![CDATA[
      ID: A
      Title: Rendering & Pipelines
      ]]>
    </workstreamSelector>
  </inputs>

  <csvSchema>
    Expected headers (case-insensitive, trimmed). Accept synonyms in parentheses:
    - Workstream ID (WorkstreamID, WS)
    - Workstream Title (Workstream, Stream)
    - Task ID (ID)
    - Task Title (Title, Name)
    - Rationale
    - Deliverables
    - Acceptance Criteria (AC, AcceptanceCriteria)
    - Priority
    - Phase (MVP, Beyond MVP)
    - Missing Features (Missing, Gap)
    - Dependencies
    - Risks/Mitigations (Risks, Mitigations)
    - Original Ref (Ref, Source)
  </csvSchema>

  <plan>
    1) Validate & Load CSV
       - Detect delimiter (default comma), handle quotes/BOM/CRLF.
       - Verify presence of required columns: Workstream ID/Title, Task ID, Task Title, Deliverables, Acceptance Criteria.
       - If missing → <b>UNCERTAIN</b> with the exact missing header(s).
    2) Select Workstream
       - Filter rows where Workstream ID equals the provided ID OR Workstream Title equals the provided Title (case-insensitive).
       - If zero rows match → <b>UNCERTAIN</b> and list available workstreams discovered.
       - Produce a task list (Task ID/Title + Deliverables + AC + Dependencies).
    3) Derive Audit Keywords per Task
       - From Deliverables & ACs, extract likely artifacts: filenames (e.g., <code>*.wgsl</code>), symbols (<code>create_render_pipeline</code>, <code>bind_group</code>), Python entry points (<code>forge3d</code> API names), examples/docs paths.
       - Build a concise keyword set per task to minimize false positives.
    4) Repository Scan (read-only)
       - Search <code>src/</code>, <code>shaders/</code>, <code>python/forge3d/</code>, <code>examples/</code>, <code>docs/</code> using ripgrep.
       - Collect evidence snippets (file path, line numbers) for matches. Confirm wiring where feasible (e.g., shader referenced by pipeline; Python API exposes function).
    5) Readiness Classification
       - For each task, decide:
         * <b>Present & Wired</b>: artifacts exist and appear integrated (e.g., pipeline + API + example/test/doc).
         * <b>Present but Partial</b>: artifacts exist but wiring/exposure/tests/docs missing.
         * <b>Absent</b>: no meaningful artifacts detected.
       - Note platform/memory/build considerations if ACs or Dependencies imply them.
    6) Minimal Change Plan (No Edits)
       - For Partial/Absent items, outline the minimal file-level changes needed (paths/symbols), ordered to reach “Present & Wired.”
       - Keep within stated constraints (platforms, memory, build).
    7) Outputs
       - Generate a Markdown audit report and a machine-readable audit matrix CSV. Include an optional search transcript.
  </plan>

  <deliverables>
    - <b>reports/audit_&lt;workstream&gt;.md</b> — Markdown report with:
      1) Scope & CSV summary (matched rows count)
      2) Readiness Verdict per task (Present & Wired / Partial / Absent)
      3) Evidence Map (file paths + line refs/snippets)
      4) Blocking Gaps
      5) Minimal Change Plan (file-level)
      6) Validation Runbook (commands to verify after implementation)
    - <b>reports/audit_&lt;workstream&gt;_matrix.csv</b> — Columns:
      <code>Workstream ID,Workstream Title,Task ID,Task Title,Readiness,Evidence Paths,Missing Pieces,Minimal Changes,Priority,Phase,Dependencies,Risks/Mitigations,Original Ref</code>
    - <b>reports/audit_&lt;workstream&gt;_grep.txt</b> — Key ripgrep snippets supporting findings (optional).
  </deliverables>

  <acceptanceCriteria>
    - AC-001: CSV loaded and filtered; report states matched workstream and counts.
    - AC-002: Every task row audited has a single Readiness Verdict with at least one evidence reference (or explicit “no evidence found”).
    - AC-003: Minimal Change Plan lists concrete file paths/symbols for all Partial/Absent items.
    - AC-004: Validation Runbook includes build, headless demo/test, and (if applicable) docs build commands.
    - AC-005: No repo modifications were made (audit-only).
  </acceptanceCriteria>

  <execution>
    <commands>
      - python - <<'PY'
import csv, sys, os, re, json, pathlib
p = pathlib.Path("{{roadmapPath}}")
if not p.exists():
    print("UNCERTAIN: roadmap.csv not found at", p, file=sys.stderr); sys.exit(2)
# Basic header read (robust to BOM)
import codecs
with codecs.open(p, "r", "utf-8-sig") as f:
    head = f.readline()
print("CSV_HEADER_SAMPLE:", head.strip())
PY
      - rg --version
      - rg -n --stats --hidden -g '!.git' -g '!dist' -g '!build' -g '!.venv' -g '!venv' -g '!node_modules' -g '!__pycache__' \
        '(wgsl|create_render_pipeline|bind_group|sampler|texture|queue\\.write_(buffer|texture)|forge3d|import +forge3d|from +forge3d +import)' \
        src/ shaders/ python/ examples/ docs/ || true
    </commands>
    <notes>
      - When building keyword sets, prefer exact filenames and identifiers from the Deliverables/AC cells.
      - Disambiguate similar tasks by checking adjacency (e.g., shader present <i>and</i> referenced by a pipeline).
      - If multiple implementations exist, document each and pick the best match based on AC phrasing.
    </notes>
  </execution>

  <completion>
    Provide:
    - <b>reports/audit_&lt;workstream&gt;.md</b>
    - <b>reports/audit_&lt;workstream&gt;_matrix.csv</b>
    - (optional) <b>reports/audit_&lt;workstream&gt;_grep.txt</b>
    If CSV headers or the workstream filter are invalid, reply <b>UNCERTAIN</b> with exact corrections needed.
  </completion>
</task>
