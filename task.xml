<task>
  <title>Implement & wire missing/partial items for Workstream C</title>

  <inputs>
    <repoRoot>.</repoRoot>
    <paths>
      <path>src/</path>
      <path>src/core/</path>
      <path>src/scene/</path>
      <path>src/shaders/</path>
      <path>python/forge3d/</path>
      <path>examples/</path>
      <path>docs/</path>
      <path>tests/</path>
    </paths>
    <workstreamC>
      <task id="C5">Frame graph with transient aliasing</task>
      <task id="C6">Multi-thread command recording</task>
      <task id="C7">Async compute prepasses with timeline semaphores</task>
      <task id="C8">Full linear→tonemap→sRGB pipeline (post-process)</task>
      <task id="C9">Matrix stack utility (push/pop)</task>
      <task id="C10">Hierarchical scene graph (parent/child, composed transforms)</task>
    </workstreamC>
  </inputs>

  <plan>
    <!-- Dependency-ordered per audit: Framegraph enables multi-pass; tonemap PP depends on that.
         Scene graph (C10) builds on matrix stack (C9). Threading (C6) and async compute (C7) rely on
         framegraph resource/pass descriptions for safe recording/scheduling. -->
    <step id="C5-impl">
      <desc>Replace framegraph stub with minimal usable graph supporting resources, passes, barriers, and transient aliasing.</desc>
      <changes>
        <create>src/core/framegraph/mod.rs</create>
        <modify>src/core/framegraph.rs</modify>
        <create>src/core/framegraph/types.rs</create>
        <create>src/core/framegraph/barriers.rs</create>
        <create>tests/test_c5_framegraph.rs</create>
      </changes>
    </step>

    <step id="C8-pp" dependsOn="C5-impl">
      <desc>Add dedicated tonemap post-process pass (linear → tonemap → sRGB) using full-screen triangle and exposure control.</desc>
      <changes>
        <create>src/core/tonemap.rs</create>
        <create>src/shaders/postprocess_tonemap.wgsl</create>
        <modify>src/renderer.rs</modify>
        <modify>src/lib.rs</modify>
        <create>tests/test_c8_tonemap_pass.rs</create>
      </changes>
    </step>

    <step id="C9-mstack">
      <desc>Implement matrix stack push/pop utility with limits & error handling; expose Python API.</desc>
      <changes>
        <create>src/core/matrix_stack.rs</create>
        <modify>src/lib.rs</modify>
        <create>tests/test_c9_matrix_stack.rs</create>
      </changes>
    </step>

    <step id="C10-scene" dependsOn="C9-mstack">
      <desc>Implement hierarchical scene graph nodes (transform, children) and traversal with composed matrices; integrate with renderer entry-points.</desc>
      <changes>
        <modify>src/scene/mod.rs</modify>
        <create>src/scene/node.rs</create>
        <create>tests/test_c10_scene_hierarchy.rs</create>
      </changes>
    </step>

    <step id="C6-mt" dependsOn="C5-impl">
      <desc>Add thread-safe command recording scaffolding and parallel pass encoding wired to the framegraph.</desc>
      <changes>
        <create>src/core/threading.rs</create>
        <modify>src/renderer.rs</modify>
        <create>tests/test_c6_multithread.rs</create>
      </changes>
    </step>

    <step id="C7-async" dependsOn="C5-impl">
      <desc>Add async compute prepass support and timeline semaphore wrapper; schedule compute → graphics via the framegraph.</desc>
      <changes>
        <create>src/core/compute.rs</create>
        <create>src/core/timeline.rs</create>
        <modify>src/renderer.rs</modify>
        <create>src/shaders/compute_prepass.wgsl</create>
        <create>tests/test_c7_async_compute.rs</create>
      </changes>
    </step>

    <step id="docs">
      <desc>Add Sphinx stub pages for new APIs (tonemap, matrix stack, scene graph) with code snippets.</desc>
      <changes>
        <create>docs/workstream_c.rst</create>
        <modify>docs/index.rst</modify>
        <create>examples/c8_tonemap_demo.py</create>
        <create>examples/c10_scene_demo.py</create>
      </changes>
    </step>
  </plan>

  <deliverables>
    <item task="C5">
      <files>
        <file>src/core/framegraph/*.rs</file>
        <file>tests/test_c5_framegraph.rs</file>
      </files>
      <apis>
        <api>pub struct FrameGraph; pub struct PassBuilder; pub struct ResourceHandle;</api>
        <api>FrameGraph::add_pass(&str, fn(&mut PassBuilder))</api>
        <api>Transient aliasing: ResourceDesc{usage, size, format}, lifetime tracking</api>
      </apis>
    </item>

    <item task="C8">
      <files>
        <file>src/core/tonemap.rs</file>
        <file>src/shaders/postprocess_tonemap.wgsl</file>
        <file>tests/test_c8_tonemap_pass.rs</file>
      </files>
      <apis>
        <api>Renderer.set_exposure(f32) -> PyO3 export</api>
        <api>Renderer.render_with_tonemap(&mut self, target: &TextureView)</api>
      </apis>
    </item>

    <item task="C9">
      <files>
        <file>src/core/matrix_stack.rs</file>
        <file>tests/test_c9_matrix_stack.rs</file>
      </files>
      <apis>
        <api>MatrixStack::new(capacity: usize)</api>
        <api>push(mat4), pop() -> mat4, top() -> mat4</api>
        <api>PyO3: forge3d.matrix_stack_new/push/pop/top</api>
      </apis>
    </item>

    <item task="C10">
      <files>
        <file>src/scene/node.rs</file>
        <file>tests/test_c10_scene_hierarchy.rs</file>
      </files>
      <apis>
        <api>SceneNode{id, local: Mat4, world: Mat4, children: Vec&lt;NodeId&gt;}</api>
        <api>Scene::add_node(parent: Option&lt;NodeId&gt;, local: Mat4) -> NodeId</api>
        <api>Scene::update_world()</api>
      </apis>
    </item>

    <item task="C6">
      <files>
        <file>src/core/threading.rs</file>
        <file>tests/test_c6_multithread.rs</file>
      </files>
      <apis>
        <api>CommandRecordTask{pass_id}</api>
        <api>FrameGraph::record_parallel(&self, threads: usize) -> Metrics</api>
      </apis>
    </item>

    <item task="C7">
      <files>
        <file>src/core/compute.rs</file>
        <file>src/core/timeline.rs</file>
        <file>src/shaders/compute_prepass.wgsl</file>
        <file>tests/test_c7_async_compute.rs</file>
      </files>
      <apis>
        <api>ComputePipelineWrapper</api>
        <api>TimelineSemaphore (wrapper around wgpu queue submission fences)</api>
      </apis>
    </item>

    <item task="Docs">
      <files>
        <file>docs/workstream_c.rst</file>
        <file>examples/c8_tonemap_demo.py</file>
        <file>examples/c10_scene_demo.py</file>
      </files>
    </item>
  </deliverables>

  <acceptanceCriteria>
    <criterion task="C5">
      <text>Unit test builds a 2-pass graph (scene → tonemap), verifies resource lifetimes, and asserts aliasing occurs (at least one attachment Handle reused) and barriers are emitted in correct order. Test: cargo test -p forge3d tests::test_c5_framegraph -- --quiet</text>
    </criterion>
    <criterion task="C8">
      <text>Rendering a linear gray ramp through postprocess produces sRGB PNG with ΔE (approx from per-channel gamma) &lt;= 1.5 vs analytical reference; exposure knob scales luminance monotonically. Test: pytest -q tests/test_c8_tonemap_pass.py</text>
    </criterion>
    <criterion task="C9">
      <text>Matrix stack push/pop/top are O(1); overflow/underflow return clear errors; 100 random push/pops round-trip equals identity. Test: cargo test tests::test_c9_matrix_stack</text>
    </criterion>
    <criterion task="C10">
      <text>Scene graph traversal composes transforms so that a child translated (1,0,0) under a parent rotated 90° about Z yields world position (0,1,0) within 1e-5. Test: cargo test tests::test_c10_scene_hierarchy</text>
    </criterion>
    <criterion task="C6">
      <text>Parallel recording path uses at least 2 threads (on 4+ core host); Metrics.threads_used ≥ 2 and render output checksum matches single-thread path. Test: cargo test tests::test_c6_multithread</text>
    </criterion>
    <criterion task="C7">
      <text>Compute prepass produces a non-zero buffer used by graphics pass; submission order enforced (compute completes before graphics read). Test: cargo test tests::test_c7_async_compute</text>
    </criterion>
    <criterion task="Docs">
      <text>Sphinx page docs/workstream_c.rst builds without warnings and shows code snippets for tonemap and scene graph. Command: sphinx-build -b html docs/ _build/html</text>
    </criterion>
    <criterion task="BuildRunbook">
      <text>Across win_amd64, linux_x86_64, macos_universal2: maturin develop --release --features terrain_spike succeeds; python -c "import forge3d" works; pytest -q passes new tests; GPU host-visible allocations stay ≤ 512 MiB during tests.</text>
    </criterion>
  </acceptanceCriteria>

  <safety>
    <rule>Create branch feature/workstream-c-fill</rule>
    <rule>Small, reviewable commits per step; add unit tests before refactors</rule>
    <rule>Audit-first: read/grep only before changes; no blind search/replace</rule>
    <rule>Exclude binary/build dirs from edits: target/, build/, dist/, *.png</rule>
    <rule>Respect memory budget ≤ 512 MiB host-visible; fail fast on budget checkers</rule>
  </safety>

  <constraints>
    <platforms>win_amd64, linux_x86_64, macos_universal2</platforms>
    <gpuBudgetMiB>512</gpuBudgetMiB>
    <build>cmake&gt;=3.24, cargo/rustc, PyO3, VMA</build>
    <apis>WebGPU/WGSL primary; Vulkan 1.2 compatible design</apis>
    <docs>Sphinx</docs>
  </constraints>

  <completion>
    <summary>All Workstream C gaps (C5–C10) implemented and wired; tests/docs added; tonemap moved to a dedicated post-process pass; framegraph enables multi/async passes; matrix/scene utilities provide hierarchical transforms; parallel recording and compute prepass validated.</summary>
    <commands>
      <cmd>git checkout -b feature/workstream-c-fill</cmd>
      <cmd>maturin develop --release --features terrain_spike</cmd>
      <cmd>pytest -q</cmd>
      <cmd>cargo test -q</cmd>
      <cmd>python examples/c8_tonemap_demo.py</cmd>
      <cmd>python examples/c10_scene_demo.py</cmd>
      <cmd>sphinx-build -b html docs/ _build/html</cmd>
    </commands>
  </completion>
</task>
