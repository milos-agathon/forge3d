<task id="T4.2-postpass-typing-and-surface-polish" owner="claude" version="1.0">
  <summary>
    Add Python typing artifacts and small packaging polish to lock the public API, keep __all__ curated,
    and ensure tools/editors have full signatures. No behavioral changes; keep all tests green.
  </summary>

  <goals>
    <goal>Ship type information: provide python/vulkan_forge/__init__.pyi and python/vulkan_forge/py.typed.</goal>
    <goal>Expose diagnostics in the curated surface: add enumerate_adapters and device_probe to __all__ (still no _vulkan_forge).</goal>
    <goal>Minor hygiene: remove unused PyUntypedArrayMethods import in src/scene/mod.rs.</goal>
    <goal>Add a tiny test to verify py.typed presence and stub import shapes.</goal>
  </goals>

  <acceptance>
    <criterion>All existing tests continue to pass unmodified.</criterion>
    <criterion>New test test_typing_stubs.py passes.</criterion>
    <criterion>vulkan_forge.__all__ contains: Renderer, Scene, png_to_numpy, numpy_to_png, grid_generate, render_triangle_rgba, render_triangle_png, dem_stats, dem_normalize, enumerate_adapters, device_probe, __version__ (TerrainSpike may be present if compiled).</criterion>
    <criterion>importlib.resources.files("vulkan_forge").joinpath("py.typed") exists at test runtime.</criterion>
    <criterion>No _vulkan_forge entry in __all__ (attribute may or may not exist, but must not be exported).</criterion>
    <criterion>No unused-import lints introduced; scene/mod.rs no longer imports PyUntypedArrayMethods.</criterion>
  </acceptance>

  <files>
    <!-- 1) Update curated surface to include diagnostics; keep no-leak invariant -->
    <edit file="python/vulkan_forge/__init__.py" mode="patch">
      <find><![CDATA[__all__ = [
    "Renderer",
    "Scene",
    "png_to_numpy",
    "numpy_to_png",
    "grid_generate",
    "render_triangle_rgba",
    "render_triangle_png",
    "dem_stats",
    "dem_normalize",
    "__version__",
]]]></find>
      <replace><![CDATA[__all__ = [
    "Renderer",
    "Scene",
    "png_to_numpy",
    "numpy_to_png",
    "grid_generate",
    "render_triangle_rgba",
    "render_triangle_png",
    "dem_stats",
    "dem_normalize",
    "enumerate_adapters",
    "device_probe",
    "__version__",
]]]></replace>
    </edit>

    <!-- 2) Add shipped typing stubs describing the public surface -->
    <create file="python/vulkan_forge/__init__.pyi"><![CDATA[
from __future__ import annotations
from typing import Iterable, Tuple, Optional, Sequence, Any, overload, Union
import os
import numpy as np

PathLikeStr = os.PathLike[str] | str

__version__: str

class Renderer:
    def __init__(self, width: int, height: int) -> None: ...
    def info(self) -> str: ...
    def render_triangle_rgba(self) -> np.ndarray: ...  # (H,W,4) uint8, C-contiguous
    def render_triangle_png(self, path: PathLikeStr) -> None: ...
    # Terrain helpers (subset)
    def add_terrain(self, heightmap: np.ndarray, spacing: Tuple[float, float], exaggeration: float, colormap: str) -> None: ...
    def terrain_stats(self) -> Tuple[float, float, float, float]: ...
    def set_height_range(self, min: float, max: float) -> None: ...
    def upload_height_r32f(self) -> None: ...
    def read_full_height_texture(self) -> np.ndarray: ...

class Scene:
    def __init__(self, width: int, height: int, grid: int = ..., colormap: str = ...) -> None: ...
    def set_camera_look_at(self,
        eye: Tuple[float, float, float],
        target: Tuple[float, float, float],
        up: Tuple[float, float, float],
        fovy_deg: float, znear: float, zfar: float) -> None: ...
    def set_height_from_r32f(self, height_r32f: np.ndarray) -> None: ...
    def render_png(self, path: PathLikeStr) -> None: ...
    def render_rgba(self) -> np.ndarray: ...  # (H,W,4) uint8, C-contiguous
    def debug_uniforms_f32(self) -> np.ndarray: ...
    def debug_lut_format(self) -> str: ...

# Optional export if compiled with --features terrain_spike
class TerrainSpike: ...
def grid_generate(nx: int, nz: int, spacing: Tuple[float, float] = ..., origin: str = ...) -> Tuple[np.ndarray, np.ndarray, np.ndarray]: ...

def png_to_numpy(path: PathLikeStr) -> np.ndarray: ...          # (H,W,4) uint8
def numpy_to_png(path: PathLikeStr, array: np.ndarray) -> None: ...

def render_triangle_rgba(width: int, height: int) -> np.ndarray: ...
def render_triangle_png(path: PathLikeStr, width: int, height: int) -> None: ...

def dem_stats(heightmap: np.ndarray) -> Tuple[float, float, float, float]: ...
def dem_normalize(heightmap: np.ndarray, *, mode: str = ..., out_range: Tuple[float, float] = ..., eps: float = ..., return_stats: bool = ...) -> np.ndarray | Tuple[np.ndarray, Tuple[float, float, float, float]]: ...

def enumerate_adapters() -> list[dict[str, Any]]: ...
def device_probe(backend: Optional[str] = ...) -> dict[str, Any]: ...
]]></create>

    <!-- 3) Mark the package as typed -->
    <create file="python/vulkan_forge/py.typed"><![CDATA[]]></create>

    <!-- 4) Ensure packaging includes the typing artifacts -->
    <edit file="pyproject.toml" mode="patch">
      <find><![CDATA[[tool.setuptools.package-data]]]></find>
      <replace><![CDATA[[tool.setuptools.package-data]
"vulkan_forge" = ["py.typed", "__init__.pyi"]]]></replace>
      <fallback>
        <![CDATA[
[tool.setuptools.package-data]
"vulkan_forge" = ["py.typed", "__init__.pyi"]
        ]]>
      </fallback>
    </edit>

    <!-- 5) Drop unused import in scene module -->
    <edit file="src/scene/mod.rs" mode="patch">
      <find><![CDATA[use numpy::{PyUntypedArrayMethods, IntoPyArray};]]></find>
      <replace><![CDATA[use numpy::IntoPyArray;]]></replace>
    </edit>

    <!-- 6) Add tiny test ensuring typing artifacts ship and curated surface remains -->
    <create file="tests/test_typing_stubs.py"><![CDATA[
import importlib.resources as res
import types
import vulkan_forge as vf

def test_py_typed_shipped():
    assert res.files("vulkan_forge").joinpath("py.typed").is_file()

def test_public_surface_includes_diagnostics_and_no_module_leak():
    for name in [
        "Renderer", "Scene",
        "png_to_numpy", "numpy_to_png",
        "grid_generate", "render_triangle_rgba", "render_triangle_png",
        "dem_stats", "dem_normalize",
        "enumerate_adapters", "device_probe",
        "__version__",
    ]:
        assert name in getattr(vf, "__all__", []), f"missing in __all__: {name}"
    assert "_vulkan_forge" not in getattr(vf, "__all__", [])
    if hasattr(vf, "_vulkan_forge"):
        assert isinstance(getattr(vf, "_vulkan_forge"), types.ModuleType)
]]></create>
  </files>

  <notes>
    Keep runtime behavior identical. Do not refactor Rust; only remove the single unused import in Scene.
    The pyproject section edit should add (or create) package-data so wheels include the typing files.
  </notes>
</task>
