<code_task>
  <title>Ensure camera tests are in tests/test_camera.py and verify pytest discovery</title>
  <context>
    The camera test suite is already complete and passing. This task must be a no-op if the file
    already lives at tests/test_camera.py. Only move the file if it exists at the repo root
    (./test_camera.py) and tests/test_camera.py is missing. Do not modify file contents.
  </context>

  <constraints>
    <item>Idempotent: running this task multiple times must not create duplicates or modify contents.</item>
    <item>Do not change any code other than creating the tests/ folder (if missing) and relocating the file.</item>
    <item>Do not reformat or rewrite tests/test_camera.py.</item>
    <item>Do not alter tooling configs unless absolutely required (it shouldnâ€™t be).</item>
  </constraints>

  <plan>
    <step id="detect">
      <shell>
        <![CDATA[
set -euo pipefail
ROOT_FILE="test_camera.py"
TESTS_DIR="tests"
DEST_FILE="${TESTS_DIR}/test_camera.py"

# Report current state
echo "HAS_ROOT_FILE=$([ -f "$ROOT_FILE" ] && echo yes || echo no)"
echo "HAS_DEST_FILE=$([ -f "$DEST_FILE" ] && echo yes || echo no)"
        ]]>
      </shell>
    </step>

    <step id="relocate_if_needed" condition="HAS_ROOT_FILE==yes && HAS_DEST_FILE==no">
      <shell>
        <![CDATA[
set -euo pipefail
mkdir -p tests
git mv -k test_camera.py tests/test_camera.py 2>/dev/null || mv -f test_camera.py tests/test_camera.py
        ]]>
      </shell>
    </step>

    <step id="assert_location">
      <shell>
        <![CDATA[
set -euo pipefail
if [ ! -f "tests/test_camera.py" ]; then
  echo "ERROR: tests/test_camera.py not found after relocation check." >&2
  exit 1
fi
        ]]>
      </shell>
    </step>

    <step id="run_pytest_quick">
      <shell>
        <![CDATA[
set -euo pipefail
# Run full discovery quietly; do not fail the whole task on skipped TerrainSpike tests.
pytest -q || exit_code=$?
# If pytest returns 0, great; if it fails, still collect details below.
        ]]>
      </shell>
    </step>

    <step id="run_camera_subset">
      <shell>
        <![CDATA[
set -euo pipefail
# Ensure the 20 camera tests are discovered and runnable
pytest -q -k "camera or TerrainSpikeIntegration or default_proj_is_wgpu" --maxfail=1
        ]]>
      </shell>
    </step>

    <step id="report_counts">
      <shell>
        <![CDATA[
set -euo pipefail
# Two structured runs to capture counts
TOTAL_LINE="$(pytest -q 2>&1 | tail -n 1 || true)"
CAM_LINE="$(pytest -q -k 'camera or TerrainSpikeIntegration or default_proj_is_wgpu' 2>&1 | tail -n 1 || true)"

printf '{"summary":{"total_line":"%s","camera_line":"%s"}}\n' "$TOTAL_LINE" "$CAM_LINE"
        ]]>
      </shell>
    </step>
  </plan>

  <acceptance_criteria>
    <item>tests/test_camera.py exists; there is no duplicate test_camera.py at repo root.</item>
    <item>Running <code>pytest -q</code> succeeds (skips for optional GPU parts are fine).</item>
    <item>Running <code>pytest -q -k "camera or TerrainSpikeIntegration or default_proj_is_wgpu"</code> executes the camera suite (expected ~20 tests), all passing.</item>
    <item>No other files were modified.</item>
  </acceptance_criteria>

  <deliverables>
    <item>File path correctness (tests/test_camera.py).</item>
    <item>Console output lines summarizing pytest results for full suite and camera subset (printed as JSON in the final step).</item>
  </deliverables>

  <commit_message>
    chore(tests): ensure camera tests live under tests/ and verify pytest discovery
  </commit_message>
</code_task>
