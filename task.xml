<Task name="T33 — Colormap name mapping + height-based LUT sampling (idempotent, show-diffs)">

  <Policy>
    - Phase A is READ-ONLY. Abort if any write occurs during Phase A.
    - Phase B allowed edits only (as needed by findings):
      1) src/terrain.rs             (colormap registry / loader glue; error msg from registry)
      2) src/colormap.rs            (NEW: static registry mapping name → include_bytes; SUPPORTED list)
      3) shaders/terrain.wgsl       (compute true h_norm from height texture + globals range)
      4) README.md                  (optional brief note; inside T33 markers)
      5) tests/test_colormap.py     (NO semantic changes; only allow small verbosity if needed)
    - Wrap every change in **T33-BEGIN / T33-END** markers. Keep imports/exports stable.
    - `python -c "import vulkan_forge"` must be a no-op.
    - Touch ≤ 8 files. Print unified diffs for each changed file.
  </Policy>

  <Context>
    Current state (from user run):
      • Assets exist: viridis_256x1.png, magma_256x1.png, terrain_256x1.png
      • WGSL has LUT sampling but uses screen-space Y (or otherwise not height) → uniform image → ~710 B PNGs
      • Runtime still raises for colormap="magma" even though the supported list includes it
    Suspected root causes:
      1) Name→asset mapping mismatch (e.g., code expects "magma.png" but asset is "magma_256x1.png"; or wrong relative path in include_bytes!)
      2) Fragment shader not computing `h_norm` from height texture + `(h_min, h_max)` (T0.2) → nearly constant color
  </Context>

  <!-- ===================== PHASE A — DISCOVERY (READ-ONLY) ===================== -->
  <Requests>
    <Request id="A1" description="Locate TerrainSpike constructor and colormap resolution">
      <Action>
        - rg -n "struct\\s+TerrainSpike|impl\\s+TerrainSpike|new\\(|with_colormap|colormap" -S src | cat
        - rg -n "Unknown colormap|Supported:" -S src | cat
      </Action>
    </Request>

    <Request id="A2" description="Verify include_bytes! paths and actual asset filenames">
      <Action>
        - rg -n "include_bytes!\\(" -S src | cat
        - rg -n "colormaps.*\\.png" -S | cat
      </Action>
    </Request>

    <Request id="A3" description="Find height texture bindings + globals h-range in WGSL">
      <Action>
        - rg -n "@group\\(0\\).*binding\\(" -S shaders | cat
        - rg -n "height.*(texture|sampler)|elev|dem" -S shaders | cat
        - rg -n "h_min|h_max|h_range|exaggeration" -S shaders | cat
      </Action>
    </Request>

    <Request id="A4" description="Check Rust side for globals with height range (T0.2)">
      <Action>
        - rg -n "h_min|h_max|h_range" -S src | cat
        - rg -n "globals_dirty|write_buffer|update_globals|uniform" -S src | cat
      </Action>
    </Request>
  </Requests>

  <!-- =================== PHASE B — IMPLEMENTATION (IDEMPOTENT) =================== -->
  <Edits>

    <!-- 1) NEW registry: single source of truth for names, bytes, and Supported list -->
    <File path="src/colormap.rs" intent="Static registry mapping 'viridis|magma|terrain' → embedded PNG bytes">
      <Upsert>
<![CDATA[
// T33-BEGIN:colormap-registry
pub const SUPPORTED: &[&str] = &["viridis", "magma", "terrain"];

pub fn resolve_bytes(name: &str) -> Result<&'static [u8], &'static str> {
    let key = name.trim(); // keep case-sensitive per tests
    match key {
        "viridis" => Ok(include_bytes!("../assets/colormaps/viridis_256x1.png")),
        "magma"   => Ok(include_bytes!("../assets/colormaps/magma_256x1.png")),
        "terrain" => Ok(include_bytes!("../assets/colormaps/terrain_256x1.png")),
        _ => Err("unknown"),
    }
}
// T33-END:colormap-registry
]]>
      </Upsert>
    </File>

    <!-- 2) Terrain glue: use registry; unify error message with SUPPORTED -->
    <File path="src/terrain.rs" intent="Use registry for name→bytes; precise error message">
      <InsertIfMissing anchor="// T33-BEGIN:colormap-loader" position="end">
<![CDATA[
// T33-BEGIN:colormap-loader
mod colormap;
use colormap::{resolve_bytes, SUPPORTED};

fn load_colormap_png_bytes(name: &str) -> pyo3::PyResult<&'static [u8]> {
    match resolve_bytes(name) {
        Ok(bytes) => Ok(bytes),
        Err(_) => {
            let supported = SUPPORTED.join(", ");
            Err(pyo3::exceptions::PyRuntimeError::new_err(format!(
                "Unknown colormap '{}'. Supported: {}", name, supported
            )))
        }
    }
}
// Ensure TerrainSpike::new(...) calls `load_colormap_png_bytes(colormap)`
// and decodes PNG via the existing image loader path.
// T33-END:colormap-loader
]]>
      </InsertIfMissing>

      <ReplaceLeastSpecific>
<![CDATA[
Unknown colormap '[^']+'.*Supported:[^\n]+
]]>
<![CDATA[
Unknown colormap '{}' . Supported: {}
]]>
      </ReplaceLeastSpecific>
    </File>

    <!-- 3) WGSL: compute true h_norm from height texture + (h_min,h_max) -->
    <File path="shaders/terrain.wgsl" intent="Replace screen-space Y usage with height-based normalization">
      <InsertIfMissing anchor="// T33-BEGIN:height-norm" position="end">
<![CDATA[
// T33-BEGIN:height-norm
// Assumptions (adapt if Phase A finds different identifiers):
// - `height_tex`/`height_sam` exist and sample the DEM's R channel in meters.
// - `globals` provides a min/max pair either as `h_range: vec2<f32>`,
//   or `h_min: f32` and `h_max: f32`. We handle both via `vf_h_range()`.
fn vf_h_range(globals: Globals) -> vec2<f32> {
  // Try common layouts in order; compiler will DCE unused fields.
  #ifdef HAS_H_RANGE
    return globals.h_range;
  #else
    // Fallback field names; if they don't exist the build will fail and Phase A should adjust anchors.
    return vec2<f32>(globals.h_min, globals.h_max);
  #endif
}

fn height_to_norm(h_m: f32, globals: Globals) -> f32 {
  let hr = vf_h_range(globals);
  let denom = max(hr.y - hr.x, 1e-5);
  return clamp((h_m - hr.x) / denom, 0.0, 1.0);
}
// T33-END:height-norm
]]>
      </InsertIfMissing>

      <!-- Replace any previous 'screen-space' or placeholder h_norm with height-based value -->
      <ReplaceLeastSpecific>
<![CDATA[
(\b(let|var)\s+h_norm\s*=\s*)([^\n;]+)(;)
]]>
<![CDATA[
\1 height_to_norm(textureSample(height_tex, height_sam, uv).r, globals)\4
]]>
      </ReplaceLeastSpecific>
    </File>

    <!-- 4) Optional: README breadcrumb -->
    <File path="README.md" intent="Document that LUT mapping is embedded and fragment uses height">
      <InsertBefore anchor="## Public API (Python)" occurrence="first">
<![CDATA[
<!-- T33-BEGIN:colormap-notes -->
### Colormap LUTs
- Built-in LUTs: **viridis**, **magma**, **terrain** (embedded 256×1 PNGs).
- Fragment shader samples the DEM R-channel and normalizes by `(h_min, h_max)` before LUT lookup.
<!-- T33-END:colormap-notes -->
]]>
      </InsertBefore>
    </File>

  </Edits>

  <!-- ====================== PHASE C — BUILD & ACCEPTANCE ====================== -->
  <Commands shell="bash">
    <Run>python -m pip install -U pip pytest numpy pillow</Run>

    <!-- Avoid the venv+conda clash -->
    <Run>
if [ -n "${VIRTUAL_ENV:-}" ] && [ -n "${CONDA_PREFIX:-}" ]; then
  echo "Both VIRTUAL_ENV and CONDA_PREFIX set; unsetting CONDA_* for this build."
  unset CONDA_PREFIX CONDA_DEFAULT_ENV CONDA_PYTHON_EXE
fi
    </Run>

    <Run>maturin develop --release</Run>

    <!-- Focused rerun for colormap tests; show verbose on failure -->
    <Run>pytest -q tests/test_colormap.py -rA || true</Run>

    <!-- Black-box probe sizes & variance after patch -->
    <Run>
python - <<'PY'
import os, tempfile, numpy as np
from PIL import Image
import vulkan_forge as vf
for c in ("viridis","magma","terrain"):
    t = vf.TerrainSpike(128,128, grid=32, colormap=c)
    with tempfile.NamedTemporaryFile(suffix=f"_{c}.png", delete=False) as tmp:
        path = tmp.name
    t.render_png(path)
    sz = os.path.getsize(path)
    arr = np.array(Image.open(path))[:,:,:3].astype(np.float32)/255.0
    print(f"{c}: size={sz} bytes, var={arr.var():.6f}, path={path}")
PY
    </Run>

    <!-- Show diffs -->
    <Run>
CHANGED=$(git status --porcelain | awk '{print $2}')
if [ -n "$CHANGED" ]; then
  for f in $CHANGED; do
    echo "### DIFF: $f"
    git --no-pager diff --unified=3 -- "$f"
    echo
  done
else
  echo "No changes required"
fi
    </Run>
  </Commands>

  <Acceptance>
    <Criterion>`TerrainSpike(..., colormap="magma")` no longer raises; error message lists SUPPORTED from a single registry.</Criterion>
    <Criterion>Fragment shader computes `h_norm` from **height texture** and **(h_min, h_max)**, not from screen coordinates.</Criterion>
    <Criterion>`tests/test_colormap.py` fully passes; each produced PNG is **> 1000 bytes** and has **variance > 1e-4**.</Criterion>
    <Criterion>All edits wrapped in `T33` markers; import has no side effects; no new validation errors.</Criterion>
  </Acceptance>

</Task>
