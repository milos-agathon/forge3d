name: Release

on:
  push:
    tags: [ 'v*' ]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build and publish wheels for all platforms
  build-wheels:
    name: Build Wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux_x86_64
          - os: windows-latest  
            platform: win_amd64
          - os: macos-latest
            platform: macos_universal2
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install maturin
        run: pip install maturin[patchelf]==1.4.0
      
      - name: Build wheels
        run: |
          # Build abi3 wheels for Python >=3.10
          maturin build --release --abi3 --out wheels/
          
          # List built wheels
          ls -la wheels/
      
      - name: Test wheel installation
        run: |
          pip install wheels/*.whl
          python -c "import forge3d; print('forge3d:', forge3d.__version__)"
          python -c "import forge3d; print('GPU available:', forge3d.has_gpu())"
      
      - name: Upload wheels to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: wheels/
          asset_name: forge3d-wheels-${{ matrix.platform }}
          asset_content_type: application/zip
      
      - name: Store wheels as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.platform }}
          path: wheels/

  # Publish to PyPI (when manually triggered or on release)
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v3
        with:
          path: all-wheels/
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install twine
        run: pip install twine
      
      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          # Flatten wheel directory structure
          find all-wheels/ -name "*.whl" -exec cp {} . \;
          
          # Upload to PyPI
          twine upload *.whl
      
      - name: Verify PyPI upload
        run: |
          sleep 30  # Wait for PyPI to process
          pip install --index-url https://pypi.org/simple/ forge3d
          python -c "import forge3d; print('PyPI version:', forge3d.__version__)"

  # Build documentation for release
  docs-release:
    name: Build Release Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build Python extension for docs
        run: |
          pip install maturin[patchelf]==1.4.0 numpy scipy
          maturin develop --release
      
      - name: Install documentation dependencies
        run: |
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints myst-parser
      
      - name: Build documentation
        run: |
          cd docs
          make html
          
          # Create archive
          tar -czf ../forge3d-docs-${{ github.ref_name }}.tar.gz _build/html/
      
      - name: Upload docs to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: forge3d-docs-${{ github.ref_name }}.tar.gz
          asset_name: forge3d-docs-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

  # Create GitHub Pages deployment for documentation
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [docs-release]
    
    steps:
      - uses: actions/checkout@v4
        with:
          # Checkout the gh-pages branch or create it
          ref: gh-pages
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install dependencies and build docs
        run: |
          pip install maturin[patchelf]==1.4.0 numpy scipy
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints myst-parser
          maturin develop --release
          
          cd docs
          make html
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          publish_branch: gh-pages
          force_orphan: true

  # Validation after release
  post-release-validation:
    name: Post-Release Validation
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Wait for PyPI propagation
        run: sleep 120  # 2 minutes
      
      - name: Test installation from PyPI
        run: |
          pip install forge3d==${{ github.ref_name }}
          python -c "
          import forge3d
          print('Installed version:', forge3d.__version__)
          print('GPU available:', forge3d.has_gpu())
          print('API exports:', len(forge3d.__all__))
          
          # Test key functionality
          try:
              import forge3d.pbr as pbr
              print('PBR materials available')
          except ImportError:
              print('PBR materials not available')
              
          try:
              import forge3d.shadows as shadows
              print('Shadow mapping available') 
          except ImportError:
              print('Shadow mapping not available')
          "
      
      - name: Smoke test basic functionality
        run: |
          python -c "
          import forge3d as f3d
          import numpy as np
          
          # Test basic image utilities
          test_img = np.random.randint(0, 256, (64, 64, 3), dtype=np.uint8)
          f3d.numpy_to_png('test.png', test_img)
          loaded = f3d.png_to_numpy('test.png')
          print('Image I/O test passed:', loaded.shape)
          
          # Test device detection
          adapters = f3d.enumerate_adapters()
          print('Adapters found:', len(adapters))
          
          print('Post-release validation passed!')
          "