name: Maintenance

on:
  schedule:
    # Run weekly dependency updates on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  # Check for outdated dependencies
  dependency-check:
    name: Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-outdated
        run: cargo install cargo-outdated --locked
      
      - name: Check for outdated Rust dependencies
        run: |
          echo "=== Rust Dependency Status ===" > dependency_report.txt
          cargo outdated --exit-code 1 >> dependency_report.txt 2>&1 || echo "Some Rust dependencies are outdated" >> dependency_report.txt
          echo "" >> dependency_report.txt
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Check Python dependencies
        run: |
          pip install pip-check
          echo "=== Python Dependency Status ===" >> dependency_report.txt
          pip-check >> dependency_report.txt 2>&1 || echo "Some Python dependencies may have issues" >> dependency_report.txt
          echo "" >> dependency_report.txt
          
          # Check for security vulnerabilities
          pip install safety
          echo "=== Python Security Check ===" >> dependency_report.txt
          safety check >> dependency_report.txt 2>&1 || echo "Some Python packages may have security issues" >> dependency_report.txt
      
      - name: Check documentation dependencies
        run: |
          echo "=== Documentation Dependencies ===" >> dependency_report.txt
          pip install sphinx sphinx-rtd-theme myst-parser
          pip list | grep -E "(sphinx|myst|rtd)" >> dependency_report.txt
      
      - name: Display dependency report
        run: cat dependency_report.txt
      
      - name: Upload dependency report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-report-${{ github.run_number }}
          path: dependency_report.txt

  # Code quality and metrics
  code-quality:
    name: Code Quality Metrics
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Code quality analysis
        run: |
          echo "=== Code Quality Report ===" > quality_report.txt
          echo "Date: $(date)" >> quality_report.txt
          echo "Commit: ${{ github.sha }}" >> quality_report.txt
          echo "" >> quality_report.txt
          
          # Lines of code analysis
          echo "=== Lines of Code ===" >> quality_report.txt
          echo "Rust source:" >> quality_report.txt
          find src/ -name "*.rs" -exec wc -l {} + | tail -1 >> quality_report.txt
          echo "Python source:" >> quality_report.txt
          find python/ -name "*.py" -exec wc -l {} + | tail -1 >> quality_report.txt
          echo "WGSL shaders:" >> quality_report.txt
          find src/ -name "*.wgsl" -exec wc -l {} + | tail -1 2>/dev/null || echo "No WGSL files found" >> quality_report.txt
          echo "" >> quality_report.txt
          
          # File counts
          echo "=== File Counts ===" >> quality_report.txt
          echo "Rust files: $(find src/ -name "*.rs" | wc -l)" >> quality_report.txt
          echo "Python files: $(find python/ -name "*.py" | wc -l)" >> quality_report.txt
          echo "Test files: $(find tests/ -name "*.py" 2>/dev/null | wc -l)" >> quality_report.txt
          echo "Example files: $(find examples/ -name "*.py" 2>/dev/null | wc -l)" >> quality_report.txt
          echo "" >> quality_report.txt
          
          # Clippy analysis
          echo "=== Clippy Analysis ===" >> quality_report.txt
          cargo clippy --all-targets --all-features --message-format=json 2>&1 | \
            grep '"level":"warning"' | wc -l | \
            xargs echo "Clippy warnings:" >> quality_report.txt
          echo "" >> quality_report.txt
      
      - name: Display quality report
        run: cat quality_report.txt
      
      - name: Upload quality report
        uses: actions/upload-artifact@v3
        with:
          name: quality-report-${{ github.run_number }}
          path: quality_report.txt

  # Documentation health check
  docs-health:
    name: Documentation Health
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install Rust and build extension
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          pip install maturin[patchelf]==1.4.0
          maturin develop --release
      
      - name: Install documentation dependencies
        run: |
          pip install sphinx sphinx-rtd-theme myst-parser numpy scipy
      
      - name: Documentation health check
        run: |
          echo "=== Documentation Health Report ===" > docs_health.txt
          echo "Date: $(date)" >> docs_health.txt
          echo "" >> docs_health.txt
          
          # Check if documentation builds
          cd docs
          echo "=== Sphinx Build Test ===" >> ../docs_health.txt
          if make html >> ../docs_health.txt 2>&1; then
            echo "✓ Documentation builds successfully" >> ../docs_health.txt
          else
            echo "✗ Documentation build failed" >> ../docs_health.txt
          fi
          echo "" >> ../docs_health.txt
          
          # Check for broken internal links
          echo "=== Link Check ===" >> ../docs_health.txt
          make linkcheck >> ../docs_health.txt 2>&1 || echo "Some links may be broken" >> ../docs_health.txt
          echo "" >> ../docs_health.txt
          
          cd ..
          
          # Count documentation files
          echo "=== Documentation Coverage ===" >> docs_health.txt
          echo "RST files: $(find docs/ -name "*.rst" | wc -l)" >> docs_health.txt
          echo "Markdown files: $(find docs/ -name "*.md" | wc -l)" >> docs_health.txt
          echo "Total doc files: $(find docs/ \( -name "*.rst" -o -name "*.md" \) | wc -l)" >> docs_health.txt
          echo "" >> docs_health.txt
          
          # Check README and key documentation
          echo "=== Key Documentation Check ===" >> docs_health.txt
          [ -f "README.md" ] && echo "✓ README.md present" >> docs_health.txt || echo "✗ README.md missing" >> docs_health.txt
          [ -f "CHANGELOG.md" ] && echo "✓ CHANGELOG.md present" >> docs_health.txt || echo "✗ CHANGELOG.md missing" >> docs_health.txt  
          [ -f "LICENSE" ] && echo "✓ LICENSE present" >> docs_health.txt || echo "✗ LICENSE missing" >> docs_health.txt
          [ -f "pyproject.toml" ] && echo "✓ pyproject.toml present" >> docs_health.txt || echo "✗ pyproject.toml missing" >> docs_health.txt
          [ -f "Cargo.toml" ] && echo "✓ Cargo.toml present" >> docs_health.txt || echo "✗ Cargo.toml missing" >> docs_health.txt
      
      - name: Display docs health report
        run: cat docs_health.txt
      
      - name: Upload docs health report
        uses: actions/upload-artifact@v3
        with:
          name: docs-health-report-${{ github.run_number }}
          path: docs_health.txt

  # Repository maintenance
  repo-maintenance:
    name: Repository Maintenance
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Repository health check
        run: |
          echo "=== Repository Maintenance Report ===" > maintenance_report.txt
          echo "Date: $(date)" >> maintenance_report.txt
          echo "" >> maintenance_report.txt
          
          # Check repository structure
          echo "=== Repository Structure ===" >> maintenance_report.txt
          echo "Total files: $(find . -type f | wc -l)" >> maintenance_report.txt
          echo "Git tracked files: $(git ls-files | wc -l)" >> maintenance_report.txt
          echo "Repository size: $(du -sh . | cut -f1)" >> maintenance_report.txt
          echo "" >> maintenance_report.txt
          
          # Check for large files
          echo "=== Large Files (>1MB) ===" >> maintenance_report.txt
          find . -type f -size +1M -not -path "./.git/*" -not -path "./target/*" | \
            head -10 | xargs -I {} sh -c 'echo "$(du -h "{}")"' >> maintenance_report.txt 2>/dev/null || \
            echo "No large files found" >> maintenance_report.txt
          echo "" >> maintenance_report.txt
          
          # Check for potential issues
          echo "=== Potential Issues ===" >> maintenance_report.txt
          
          # Check for TODO/FIXME comments
          TODO_COUNT=$(grep -r -i "TODO\|FIXME\|XXX\|HACK" src/ python/ --include="*.rs" --include="*.py" 2>/dev/null | wc -l || echo 0)
          echo "TODO/FIXME comments: $TODO_COUNT" >> maintenance_report.txt
          
          # Check for debug prints
          DEBUG_COUNT=$(grep -r "println!\|dbg!\|console.log\|print(" src/ python/ --include="*.rs" --include="*.py" 2>/dev/null | wc -l || echo 0)
          echo "Debug prints: $DEBUG_COUNT" >> maintenance_report.txt
          
          # Check for empty files
          EMPTY_COUNT=$(find . -type f -empty -not -path "./.git/*" -not -path "./target/*" | wc -l)
          echo "Empty files: $EMPTY_COUNT" >> maintenance_report.txt
          echo "" >> maintenance_report.txt
          
          # Git statistics
          echo "=== Git Statistics ===" >> maintenance_report.txt
          echo "Total commits: $(git rev-list --all --count)" >> maintenance_report.txt
          echo "Contributors: $(git shortlog -sn | wc -l)" >> maintenance_report.txt
          echo "Branches: $(git branch -a | wc -l)" >> maintenance_report.txt
          echo "Last commit: $(git log -1 --format="%h %s")" >> maintenance_report.txt
      
      - name: Display maintenance report
        run: cat maintenance_report.txt
      
      - name: Upload maintenance report
        uses: actions/upload-artifact@v3
        with:
          name: maintenance-report-${{ github.run_number }}
          path: maintenance_report.txt