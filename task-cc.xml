<task>
  <title>Implement & wire missing/partial items for Workstream B</title>

  <inputs>
    <repoRoot>.</repoRoot>
    <paths>
      <path>src/</path>
      <path>shaders/</path>
      <path>python/forge3d/</path>
      <path>examples/</path>
      <path>docs/</path>
      <path>tests/</path>
    </paths>

    <!-- Workstream B tasks synthesized from roadmap2.csv -->
    <workstreamB id="B" title="Realtime PBR &amp; Lighting">
      <task id="B1">MSAA &amp; Super-Sampling</task>
      <task id="B2">Tone-Mapping &amp; Exposure v2</task>
      <task id="B3">SSAO Pass</task>
      <task id="B4">Cascaded Shadow Maps</task>
      <task id="B5">Planar Reflections (Realtime)</task>
      <task id="B6">Depth of Field (Realtime)</task>
      <task id="B7">Cloud Shade Overlay</task>
      <task id="B8">Render Clouds (Realtime)</task>
      <task id="B10">Ground Plane (Raster)</task>
      <task id="B11">Water Surface Color Toggle</task>
      <task id="B12">Soft Light Radius (Raster)</task>
      <task id="B13">Point &amp; Spot Lights (Realtime)</task>
      <task id="B14">Rect Area Lights (LTC) — verify only</task>
      <task id="B15">Image-Based Lighting (IBL)</task>
      <task id="B16">Dual-source blending OIT (Realtime)</task>
      <task id="B17">Depth-clip control for CSM</task>
    </workstreamB>
  </inputs>

  <constraints>
    <platforms>win_amd64, linux_x86_64, macos_universal2</platforms>
    <gpuBudget>≤ 512 MiB host-visible heap</gpuBudget>
    <toolchain>cmake≥3.24, cargo/rustc, PyO3, VMA</toolchain>
    <apis>WebGPU/WGSL primary; Vulkan 1.2 compatible design</apis>
    <docs>Sphinx</docs>
  </constraints>

  <safety>
    <step>Create branch: <code>git checkout -b wsB-pbr-lighting-integration</code></step>
    <step>Audit-first: list existing files touching PBR/lighting to avoid duplication.</step>
    <step>Never modify generated/binary dirs (target/, dist/, build/, _build/).</step>
    <step>No blind search/replace; small commits per feature with tests.</step>
    <step>Enforce memory budget in examples (texture sizes, sample counts).</step>
  </safety>

  <plan>
    <!-- Order reflects CSV deps: K (Docs & QA), I (Viewer/Offscreen), F (Geometry & IO);
         plus specific edges: B16 depends on N4/H4; B17 depends on N5 and B4. -->
    <step id="P0-setup">Establish test/docs scaffolding for Workstream B (pytest markers: pbr, lighting; Sphinx stubs).</step>

    <!-- Foundational real-time post stack -->
    <step id="B2">Implement Tone-Mapping &amp; Exposure v2:
      <actions>
        <action>Add <file>shaders/tone_map.wgsl</file> (ACES/Reinhard/Hable) and unit curves.</action>
        <action>Wire into <file>src/pipeline/pbr.rs</file> with runtime toggle via Python API <file>python/forge3d/pbr.py</file>.</action>
        <action>Expose exposure (stops) in <file>python/forge3d/lighting.py</file>.</action>
      </actions>
    </step>

    <step id="B1">Add MSAA &amp; resolve path:
      <actions>
        <action>Enable multisampled color/depth targets; resolve at frame end.</action>
        <action>Python toggle: <code>set_msaa(samples: {1,2,4,8})</code> in <file>python/forge3d/viewer.py</file>.</action>
      </actions>
    </step>

    <!-- Screen-space + shadows backbone -->
    <step id="B3">Complete SSAO:
      <actions>
        <action>Introduce G-buffer normals/depth if missing; add <file>shaders/ssao.wgsl</file> + bilateral blur.</action>
        <action>Wire pass in offscreen path; expose radius/intensity in Python.</action>
      </actions>
    </step>

    <step id="B4">Implement Cascaded Shadow Maps:
      <actions>
        <action>Add 3–4 cascades, PCF/EVSM kernels (<file>shaders/csm.wgsl</file>).</action>
        <action>Split computation and sampling; integrate into PBR pipeline.</action>
      </actions>
    </step>

    <!-- Features that build on the backbone -->
    <step id="B5">Planar Reflections:
      <actions>
        <action>Add reflection render-to-texture with clip plane; roughness-aware blur.</action>
        <action>WGSL: <file>shaders/planar_reflections.wgsl</file>; viewer toggle/API.</action>
      </actions>
    </step>

    <step id="B6">Realtime DOF:
      <actions>
        <action>Circle-of-confusion pass; near/far blur with gather; <file>shaders/dof.wgsl</file>.</action>
        <action>Camera API: aperture, focus distance.</action>
      </actions>
    </step>

    <step id="B7">Cloud Shade Overlay:
      <actions>
        <action>Add 2D shadow texture modulation over terrain; parametric density/speed.</action>
      </actions>
    </step>

    <step id="B8">Realtime Clouds:
      <actions>
        <action>Billboard/volumetric lite path in <file>shaders/clouds.wgsl</file>.</action>
        <action>IBL-aware scattering approximation; tie into sky parameters.</action>
      </actions>
    </step>

    <step id="B10">Ground Plane (Raster):
      <actions>
        <action>Simple raster ground plane with grid/albedo; toggle in viewer.</action>
      </actions>
    </step>

    <step id="B11">Water Surface Color Toggle:
      <actions>
        <action>Pipeline uniform controlling water albedo/hue; Python setter.</action>
      </actions>
    </step>

    <step id="B12">Soft Light Radius (Raster):
      <actions>
        <action>Radius parameter to raster lights; falloff function in WGSL.</action>
      </actions>
    </step>

    <step id="B13">Point &amp; Spot Lights:
      <actions>
        <action>Complete per-light buffers &amp; shadowing toggles; penumbra shaping.</action>
      </actions>
    </step>

    <step id="B15">IBL polish:
      <actions>
        <action>Add irradiance/specular prefilter + BRDF LUT generation; verify rough/spec behavior.</action>
      </actions>
    </step>

    <!-- Special dep: B16 has external deps (N4/H4) but we provide runtime path + fallback -->
    <step id="B16">Dual-source blending OIT:
      <actions>
        <action>Enable dual-source path where supported; maintain WBOIT fallback; runtime switch.</action>
        <action>Examples validating ΔE vs reference.</action>
      </actions>
    </step>

    <!-- Depends on B4; turn on unclipped depth when available -->
    <step id="B17" dependsOn="B4">Depth-clip control for CSM:
      <actions>
        <action>Support <code>unclippedDepth</code> where available; retune cascades; add regression tests.</action>
      </actions>
    </step>

    <!-- Docs & examples last -->
    <step id="Docs">Author Sphinx pages for PBR/lighting; add how-to guides per feature.</step>
    <step id="Examples">Add runnable examples for each major feature with low-VRAM presets.</step>
    <step id="CI">Wire tests to CI across 3 OS; add markers to allow headless runs.</step>
  </plan>

  <deliverables>
    <!-- Per task, drawn from roadmap2.csv wording -->
    <item task="B1">Multisampled targets + resolve; API toggle.</item>
    <item task="B2">ACES/Reinhard/Hable; exposure in stops.</item>
    <item task="B3">G-buffer normals/depth; bilateral blur.</item>
    <item task="B4">3–4 cascades; PCF/EVSM.</item>
    <item task="B5">Reflection pass; clip plane; rough blur.</item>
    <item task="B6">Realtime DOF shaders + camera params.</item>
    <item task="B7">Cloud shade overlay uniforms + pass.</item>
    <item task="B8">Realtime clouds WGSL + integration.</item>
    <item task="B10">Raster ground plane + toggle.</item>
    <item task="B11">Water surface color toggle path.</item>
    <item task="B12">Soft light radius control (raster).</item>
    <item task="B13">Point/spot lights with controls.</item>
    <item task="B14">(Verify) LTC rect area lights path intact.</item>
    <item task="B15">Irradiance/spec prefilter; BRDF LUT.</item>
    <item task="B16">Enable dual-source path; runtime switch; maintain WBOIT fallback; examples.</item>
    <item task="B17">Unclipped depth toggle; cascade retune; regression tests.</item>

    <!-- Concrete files/APIs/tests/docs -->
    <file>shaders/tone_map.wgsl</file>
    <file>shaders/ssao.wgsl</file>
    <file>shaders/csm.wgsl</file>
    <file>shaders/planar_reflections.wgsl</file>
    <file>shaders/dof.wgsl</file>
    <file>shaders/clouds.wgsl</file>
    <file>python/forge3d/viewer.py</file>
    <file>python/forge3d/pbr.py</file>
    <file>python/forge3d/lighting.py</file>
    <file>examples/pbr_spheres.py</file>
    <file>examples/advanced_terrain_shadows_pbr.py</file>
    <file>examples/ssao_demo.py</file>
    <file>examples/csm_demo.py</file>
    <file>examples/reflective_plane_demo.py</file>
    <file>examples/dof_demo.py</file>
    <file>examples/clouds_demo.py</file>
    <file>examples/oit_dual_source_demo.py</file>
    <file>docs/api/pbr.md</file>
    <file>docs/api/lighting.md</file>
    <file>tests/test_b1_msaa.py</file>
    <file>tests/test_b2_tonemap.py</file>
    <file>tests/test_b3_ssao.py</file>
    <file>tests/test_b4_csm.py</file>
    <file>tests/test_b5_reflections.py</file>
    <file>tests/test_b6_dof.py</file>
    <file>tests/test_b7_cloudshade.py</file>
    <file>tests/test_b8_clouds.py</file>
    <file>tests/test_b10_groundplane.py</file>
    <file>tests/test_b11_water_toggle.py</file>
    <file>tests/test_b12_softlight.py</file>
    <file>tests/test_b13_point_spot.py</file>
    <file>tests/test_b15_ibl.py</file>
    <file>tests/test_b16_oit_dual_source.py</file>
    <file>tests/test_b17_depthclip.py</file>
  </deliverables>

  <acceptanceCriteria>
    <ac task="B1">Edge metric improves ≥20% vs 1x; no artifacts.</ac>
    <ac task="B2">Deterministic toggles; curve tests pass.</ac>
    <ac task="B3">Perceptible depth cue; 60 FPS 1080p.</ac>
    <ac task="B4">No peter-panning; stable during motion.</ac>
    <ac task="B5">≤15% frame cost; correct reflection.</ac>
    <ac task="B6">Bokeh size matches aperture; no haloing.</ac>
    <ac task="B7">Shading modulates irradiance without banding.</ac>
    <ac task="B8">Clouds render at 60 FPS 1080p with low-VRAM profile.</ac>
    <ac task="B10">Ground plane draws beneath geometry; z-fighting guarded.</ac>
    <ac task="B11">Water tint toggles predictably; scenes round-trip.</ac>
    <ac task="B12">Radius control visibly softens falloff; raster path remains stable.</ac>
    <ac task="B13">Point/spot lights illuminate correctly; shadow toggles verified.</ac>
    <ac task="B14">(Verify) LTC path renders as before.</ac>
    <ac task="B15">Roughness/spec behave correctly.</ac>
    <ac task="B16">ΔE ≤ 2 vs dual-source reference; FPS stable at 1080p.</ac>
    <ac task="B17">CSM clipping artifacts removed on supported GPUs; no regressions.</ac>

    <!-- Build/test/docs runbook -->
    <runbook>
      cargo fmt --check
      cargo clippy --all-targets --all-features -D warnings
      cargo test -q
      pytest -q
      pytest -k "pbr or lighting" -v
      sphinx-build -b html docs _build/html
      maturin build --release
      python examples/pbr_spheres.py
      python examples/advanced_terrain_shadows_pbr.py
    </runbook>
  </acceptanceCriteria>

  <completion>
    <summary>All Workstream B items shifted to "Present &amp; Wired" with tests, docs, examples, and constrained VRAM presets.</summary>
    <commands>
      <cmd>git add -A &amp;&amp; git commit -m "WS-B: integrate PBR/lighting passes, docs, tests, examples"</cmd>
      <cmd>pytest -q &amp;&amp; cargo test -q</cmd>
      <cmd>sphinx-build -b html docs _build/html</cmd>
      <cmd>python examples/ssao_demo.py</cmd>
      <cmd>python examples/csm_demo.py</cmd>
      <cmd>python examples/oit_dual_source_demo.py</cmd>
    </commands>
  </completion>
</task>
