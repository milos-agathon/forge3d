{
  "env": {
    "MAX_THINKING_TOKENS": "32000"
  },
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(python:*)",
      "Bash(maturin develop:*)",
      "Bash(set CONDA_PREFIX=)",
      "Bash(set CONDA_DEFAULT_ENV=)",
      "Bash(set CONDA_PYTHON_EXE=)",
      "Bash(powershell:*)",
      "Bash(cargo test:*)",
      "Bash(git add:*)",
      "Bash(git --no-pager diff --unified=3 -- README.md)",
      "Bash(git --no-pager diff --unified=3 -- src/terrain.rs)",
      "Bash(git --no-pager diff --unified=3 -- src/terrain/mod.rs)",
      "Bash(git --no-pager diff --cached -- src/terrain/mod.rs)",
      "Bash(git --no-pager diff --cached -- src/terrain/mesh.rs)",
      "Bash($env:CONDA_PREFIX = \"\")",
      "Bash(unset CONDA_PREFIX)",
      "Bash(set PYO3_USE_ABI3_FORWARD_COMPATIBILITY=1)",
      "Bash(set VIRTUAL_ENV=)",
      "Bash(cmd /C \"set VIRTUAL_ENV= & set PYO3_USE_ABI3_FORWARD_COMPATIBILITY=1 & maturin develop --release\")",
      "Bash(echo $VIRTUAL_ENV)",
      "Bash(echo $CONDA_PREFIX)",
      "Bash(unset VIRTUAL_ENV)",
      "Bash(export PYO3_USE_ABI3_FORWARD_COMPATIBILITY=1)",
      "Bash(pytest:*)",
      "Bash(git --no-pager diff --unified=3 -- src/lib.rs)",
      "Bash(git --no-pager diff --unified=3 -- src/terrain/mesh.rs)",
      "Bash(git --no-pager diff --unified=3 -- python/forge3d/__init__.py)",
      "Bash(git --no-pager diff --unified=3 HEAD~1..HEAD -- src/terrain/mod.rs)",
      "Bash(echo:*)",
      "Bash(cat:*)",
      "Bash(cargo check:*)",
      "Bash(cargo build:*)",
      "Bash(copy:*)",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "Bash(set VF_FORCE_LUT_UNORM=1)",
      "Bash(cargo search:*)",
      "Bash(cargo clippy:*)",
      "Bash(set -euo pipefail)",
      "Bash(if [ ! -f \"tests/test_camera.py\" ])",
      "Bash(then)",
      "Bash(exit 1)",
      "Bash(fi)",
      "Bash(true)",
      "Bash(git --no-pager diff --unified=3 -- src/shaders/terrain.wgsl)",
      "Bash(git --no-pager diff --unified=3 -- tests/test_terrain_fs.py)",
      "Bash(git --no-pager diff --unified=3 -- python/examples/terrain_normals_flip.py)",
      "Bash(grep:*)",
      "Bash(cmd /C \"set VIRTUAL_ENV= & set CONDA_PREFIX= & maturin develop --release\")",
      "Bash(cargo clean:*)",
      "Bash(export VIRTUAL_ENV=\"\")",
      "Bash(export CONDA_PREFIX=\"\")",
      "Bash(sed:*)",
      "Bash(git --no-pager diff --unified=3 -- .claude/settings.local.json)",
      "Bash(git --no-pager diff --unified=3 -- task.xml)",
      "Bash(rg:*)",
      "Bash(git --no-pager diff --unified=3 -- src/terrain/pipeline.rs)",
      "Bash(git --no-pager diff --unified=3 --staged -- src/terrain/pipeline.rs)",
      "Bash(git --no-pager diff --unified=3 -- Cargo.toml)",
      "Bash(git --no-pager diff --unified=3 -- CHANGELOG.md)",
      "Bash(touch:*)",
      "Bash(vf-bench:*)",
      "Bash(test:*)",
      "Bash(git --no-pager diff --unified=3 -- \"python/forge3d/__init__.py\")",
      "Bash(git --no-pager diff --unified=3 -- \"python/forge3d/__init__.pyi\")",
      "Bash(git checkout:*)",
      "Bash(pip install:*)",
      "Bash(git commit:*)",
      "Bash(pip uninstall:*)",
      "Bash(cmd /C:*)",
      "Bash(sphinx-build:*)",
      "Bash(make:*)",
      "Bash(src/ shaders/ python/ examples/ docs/)",
      "Bash(src/ python/ examples/ docs/ tests/)",
      "Bash('(terrain|height|colormap|render_png|render_rgba|DEM|elevation|make_grid|add_terrain)' )",
      "Bash(VF_ENABLE_TERRAIN_TESTS=1 pytest tests/test_b15_memory_integration.py -v)",
      "Bash(VF_ENABLE_TERRAIN_TESTS=1 pytest tests/test_b11_tiling.py -v)",
      "Bash(VF_ENABLE_TERRAIN_TESTS=1 pytest tests/test_b12_lod.py -v)",
      "Bash(VF_ENABLE_TERRAIN_TESTS=1 pytest tests/test_b13_slope_aspect.py -v)",
      "Bash(VF_ENABLE_TERRAIN_TESTS=1 pytest tests/test_b14_contour_extract.py -v)",
      "Bash(VF_ENABLE_TERRAIN_TESTS=1 pytest tests/test_b13_slope_aspect.py tests/test_b14_contour_extract.py -v --tb=no)",
      "Bash(set VF_ENABLE_TERRAIN_TESTS=1)",
      "Bash(src/ python/ examples/ tests/ docs/)",
      "Bash(git log:*)",
      "Bash(find:*)",
      "Bash(RUST_LOG=info cargo run --example split_vs_single_bg --release -- --frames 600 --out artifacts/perf/I6_bg_churn.csv)",
      "Bash(bash:*)",
      "Bash(C:Usersmilosforge3d.venvScriptspython.exe -c \"import forge3d; print(''Success:'', forge3d.__version__)\")",
      "Bash(\".venv/Scripts/python.exe\" -c \"import forge3d; print(''Success:'', forge3d.__version__)\")",
      "Bash(\".venv/Scripts/python.exe\" -m pytest --collect-only -q)",
      "Bash(FORGE3D_NO_BOOTSTRAP=1 \".venv/Scripts/python.exe\" -m pytest --collect-only -q)",
      "Bash(FORGE3D_NO_BOOTSTRAP=1 python -m pytest --collect-only -q)",
      "Read(C:\\Users\\milos/**)",
      "Bash(FORGE3D_NO_BOOTSTRAP=1 python -m pytest tests/ --collect-only -q)",
      "Bash(timeout:*)",
      "Read(C:\\/**)",
      "Bash(export VIRTUAL_ENV=)",
      "Bash(export CONDA_PREFIX=)",
      "Bash(git rev-parse:*)",
      "Bash(dir C:Usersmilosforge3dsrc)",
      "Bash(git reset:*)",
      "Bash(rustc:*)",
      "Bash(git mv:*)",
      "Bash(VF_ENABLE_TERRAIN_TESTS=1 cargo test lod --lib)",
      "Bash(VF_ENABLE_TERRAIN_TESTS=1 python -m pytest tests/test_b12_lod.py -v)",
      "Bash(VF_ENABLE_TERRAIN_TESTS=1 python -c \"\nimport forge3d as f3d\n\nprint(''Testing LOD system integration...'')\n\n# Create terrain with LOD enabled\nts = f3d.TerrainSpike(128, 128, 16)\nts.enable_tiling(-1000.0, -1000.0, 1000.0, 1000.0, cache_capacity=8, max_lod=3)\n\n# Test screen-space error calculation\ncamera_pos = (0.0, 100.0, -200.0)\ncamera_target = (0.0, 0.0, 0.0)\ncamera_up = (0.0, 1.0, 0.0)\n\nedge_length, error_pixels, within_budget = ts.calculate_screen_space_error(\n    tile_lod=0, tile_x=0, tile_y=0,\n    camera_pos=camera_pos,\n    camera_target=camera_target,\n    camera_up=camera_up,\n    fov_deg=45.0,\n    viewport_width=1024,\n    viewport_height=768,\n    pixel_error_budget=2.0\n)\n\nprint(f''Screen-space error: edge_length={edge_length:.1f}px, error={error_pixels:.2f}px, within_budget={within_budget}'')\n\n# Test LOD selection\nselected_lod, selected_x, selected_y = ts.select_lod_for_tile(\n    base_tile_lod=0, base_tile_x=0, base_tile_y=0,\n    camera_pos=camera_pos,\n    camera_target=camera_target,\n    camera_up=camera_up,\n    fov_deg=45.0,\n    viewport_width=1024,\n    viewport_height=768,\n    pixel_error_budget=1.0,\n    max_lod=3\n)\n\nprint(f''Selected LOD tile: lod={selected_lod}, x={selected_x}, y={selected_y}'')\n\n# Test triangle reduction\nfull_res_tiles = [(0, x, y) for x in range(4) for y in range(4)]  # 16 tiles at LOD 0\nlod_tiles = [(2, 0, 0), (2, 0, 1), (3, 0, 0)]  # Mixed LOD levels\n\nreduction = ts.calculate_triangle_reduction(\n    full_res_tiles=full_res_tiles,\n    lod_tiles=lod_tiles,\n    base_triangles_per_tile=1000\n)\n\nprint(f''Triangle reduction: {reduction:.1%} (target >= 40%)'')\nprint(f''Meets 40% requirement: {reduction >= 0.4}'')\n\nprint(''LOD system integration test completed successfully!'')\n\")",
      "Bash(maturin build:*)"
    ],
    "deny": [],
    "additionalDirectories": [
      "C:\\d C:\\Users\\milos"
    ]
  }
}