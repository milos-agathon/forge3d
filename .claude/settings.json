{
  "version": 1,
  "project": {
    "defaultTools": [
      "Read",
      "Grep"
    ],
    "permissions": {
      "allow": {
        "Read": [
          "**/*"
        ],
        "Grep": [
          "**/*"
        ],
        "Edit": [
          "**/*"
        ],
        "Write": [
          "**/*"
        ],
        "Bash": [
          "cargo *",
          "maturin *",
          "pytest *",
          "python *",
          "ffmpeg *",
          "git *",
          "pip *"
        ],
        "WebFetch": [],
        "WebSearch": []
      },
      "deny": {
        "Edit": [
          "**/secrets/**",
          "**/.pypirc",
          "**/.npmrc",
          "**/id_rsa",
          "**/credentials*",
          "**/.cargo/credentials"
        ],
        "Write": [
          "**/secrets/**",
          "**/.pypirc",
          "**/.npmrc",
          "**/id_rsa",
          "**/credentials*",
          "**/.cargo/credentials"
        ],
        "Bash": [
          "sudo *",
          "rm -rf /*",
          "curl * | sh",
          "wget * | sh",
          "apt-get *",
          "yum *",
          "twine upload *"
        ]
      }
    },
    "toolOverrides": {
      "docs-scribe": {
        "allow": {
          "WebSearch": [
            "*"
          ]
        }
      },
      "wheel-maker": {
        "deny": {
          "Bash": [
            "twine upload *",
            "gh *"
          ]
        }
      },
      "release-captain": {
        "allow": {
          "Bash": [
            "python -m build *",
            "python -m twine *"
          ]
        }
      }
    },
    "env": {
      "VULKAN_FORGE_PREFER_SOFTWARE": "1"
    }
  },
  "hooks": {
    "preToolUse": [
      {
        "name": "block-sensitive-writes",
        "when": {
          "toolMatchesAny": [
            "Edit",
            "Write"
          ],
          "pathMatchesAny": [
            "**/secrets/**",
            "**/.pypirc",
            "**/.npmrc",
            "**/id_rsa",
            "**/credentials*",
            "**/.cargo/credentials"
          ]
        },
        "deny": true,
        "message": "Blocked write to sensitive path. Ask a maintainer for explicit approval or use release-captain."
      },
      {
        "name": "block-dangerous-bash",
        "when": {
          "toolMatchesAny": [
            "Bash"
          ],
          "commandMatchesAny": [
            "sudo *",
            "rm -rf /*",
            "curl * | sh",
            "wget * | sh",
            "apt-get *",
            "yum *"
          ]
        },
        "deny": true,
        "message": "Dangerous shell command blocked. Explain why it is necessary and request maintainer approval."
      },
      {
        "name": "auto-format-before-large-diffs",
        "when": {
          "toolMatchesAny": [
            "Edit"
          ],
          "fileExtAnyOf": [
            ".rs",
            ".toml",
            ".py",
            ".md"
          ]
        },
        "run": [
          "bash -lc 'cargo fmt || true'",
          "bash -lc 'python -c \"import sys,subprocess; subprocess.call([sys.executable, \"-m\", \"black\", \".\"])\" || true'",
          "bash -lc 'python -c \"import sys,subprocess; subprocess.call([sys.executable, \"-m\", \"ruff\", \"check\", \"--fix\", \".\"])\" || true'"
        ],
        "note": "Auto-format Rust/Python/Markdown before applying large edits; continue on missing tools."
      }
    ],
    "onSubagentStop": [
      {
        "name": "log-ssim-and-metrics",
        "run": [
          "bash -lc 'mkdir -p .claude/logs'",
          "bash -lc 'python - <<PY\nimport json,glob,os,hashlib\nout={\"metrics\":{},\"images\":{}}\nfor p in glob.glob(\"**/metrics*.json\", recursive=True):\n  try:\n    with open(p) as f: out[\"metrics\"][p]=json.load(f)\n  except Exception: pass\nfor img in glob.glob(\"**/*.png\", recursive=True):\n  try:\n    with open(img,\"rb\") as f: out[\"images\"][img]=hashlib.sha256(f.read()).hexdigest()\n  except Exception: pass\nwith open(\".claude/logs/last_run.json\",\"w\") as w: json.dump(out, w, indent=2)\nprint(\"Saved .claude/logs/last_run.json (\", len(out.get(\"metrics\",{})), \"metrics,\", len(out.get(\"images\",{})), \"image hashes)\")\nPY'"
        ]
      }
    ]
  }
}