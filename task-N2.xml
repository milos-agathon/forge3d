<Task>
  <Title>Remediate failed criteria only</Title>

  <Inputs>
    <RepoRoot>.</RepoRoot>
    <Paths>
      <Path>shaders/shadow_map.wgsl</Path>
      <Path>shaders/shadow_sample.wgsl</Path>
      <Path>src/core/shadow_mapping.rs</Path>
      <Path>src/core/cascade_split.rs</Path>
      <Path>python/forge3d/shadows.py</Path>
      <Path>examples/shadow_demo.py</Path>
      <Path>tests/test_shadows.py</Path>
      <Path>docs/shadows.md</Path>
    </Paths>
  </Inputs>

  <Plan>
    <!-- 0) Branch & preflight -->
    <Step>git checkout -b fix/N2-csm-pcf</Step>
    <Step>git status --porcelain</Step>

    <!-- 1) WGSL modules (split if monolithic exists) -->
    <Step>Create shaders/shadow_map.wgsl implementing the cascaded depth pass (per-cascade light VP, depth-only pipeline).</Step>
    <Step>Create shaders/shadow_sample.wgsl with PCF sampling + cascade selection (kernel sizes 1/3/5/7, Poisson16 optional).</Step>

    <!-- 2) Rust core: CSM + splits -->
    <Step>Implement src/core/cascade_split.rs: practical split scheme with λ blend (uniform/log), returning ≥3 splits.</Step>
    <Step>Implement src/core/shadow_mapping.rs: build depth texture array, encode per-cascade passes, store light VPs, expose PCF/bias params; feature-gate under "enable-csm" if features exist.</Step>

    <!-- 3) Python shim: remove placeholder when native path available -->
    <Step>Extend python/forge3d/shadows.py to invoke native CSM build/render; keep gradient fallback if native not present. Ensure get_preset_config() returns CsmConfig presets used by tests/demo.</Step>

    <!-- 4) Example to required name + metrics -->
    <Step>Adapt/rename examples/shadows_csm_demo.py -> examples/shadow_demo.py. Render baseline (no shadows) and CSM(≥3); compute mean luminance; print "LUMA_DROP={pct:.2f}%"; write PNGs to ./out/.</Step>

    <!-- 5) Tests enforce ACs -->
    <Step>Update tests/test_shadows.py with:</Step>
    <Step>- test_csm_atlas_generation: asserts ≥3 cascades and correct atlas dimensions.</Step>
    <Step>- test_luma_drop_ge_10pct: runs a minimal headless render pair; asserts ≥10% drop.</Step>
    <Step>- test_pcf_artifacts_threshold: synthetic edge case verifying PCF reduces edge variance vs 1x1 sampling under a fixed threshold.</Step>

    <!-- 6) Docs to required path -->
    <Step>Move/rename docs/shadows_csm.md -> docs/shadows.md and align code/path snippets.</Step>

    <!-- 7) Build & verify -->
    <Step>cargo build --release</Step>
    <Step>pytest -q tests/test_shadows.py</Step>
    <Step>python examples/shadow_demo.py --out out/shadow_demo.png --atlas out/shadow_atlas.png</Step>

    <!-- 8) Commit -->
    <Step>git add shaders/shadow_map.wgsl shaders/shadow_sample.wgsl src/core/shadow_mapping.rs src/core/cascade_split.rs python/forge3d/shadows.py examples/shadow_demo.py tests/test_shadows.py docs/shadows.md</Step>
    <Step>git commit -m "N2: CSM+PCF to spec; exact paths; ≥10% luma-drop & PCF tests; docs aligned"</Step>
  </Plan>

  <Deliverables>
    <File>shaders/shadow_map.wgsl</File>
    <File>shaders/shadow_sample.wgsl</File>
    <File>src/core/shadow_mapping.rs</File>
    <File>src/core/cascade_split.rs</File>
    <File>python/forge3d/shadows.py</File>
    <File>examples/shadow_demo.py</File>
    <File>tests/test_shadows.py</File>
    <File>docs/shadows.md</File>
  </Deliverables>

  <AcceptanceCriteria>
    <AC id="AC-N2-CSMAtlases">Shadow atlas with ≥3 cascades is generated; tests assert cascade count and atlas dimensions.</AC>
    <AC id="AC-N2-LumaDrop10">Printed/verified mean-luminance drop ≥10% vs no-shadow baseline in tests/demo.</AC>
    <AC id="AC-N2-PCFArtifacts">PCF artifact test passes (edge variance below threshold vs 1×1 sampling).</AC>
  </AcceptanceCriteria>

  <Safety>
    <Rule>Work on branch fix/N2-csm-pcf; small, scoped commits.</Rule>
    <Rule>No blind search/replace; preserve public APIs.</Rule>
    <Rule>Exclude binaries/outputs: target/, out/, .maturin/, __pycache__/.</Rule>
  </Safety>

  <Constraints>
    <Platforms>win_amd64, linux_x86_64, macos_universal2</Platforms>
    <GPUMemoryBudgetMiB>512</GPUMemoryBudgetMiB</GPUMemoryBudgetMiB>
    <Build>cmake≥3.24, cargo/rustc, PyO3, VMA</Build>
    <APIs>WebGPU/WGSL primary; Vulkan 1.2 compatibility</APIs>
  </Constraints>

  <Completion>
    <Summary>N2 artifacts at exact paths; CSM atlas (≥3 cascades) generated; ≥10% luminance drop verified; PCF artifact thresholds met.</Summary>
    <Verify>
      git ls-files shaders/shadow_map.wgsl shaders/shadow_sample.wgsl src/core/shadow_mapping.rs src/core/cascade_split.rs python/forge3d/shadows.py examples/shadow_demo.py tests/test_shadows.py docs/shadows.md
      cargo build --release
      pytest -q tests/test_shadows.py
      python examples/shadow_demo.py --out out/shadow_demo.png --atlas out/shadow_atlas.png
    </Verify>
  </Completion>
</Task>
