<codex-job>
  <Role>
    You are a senior code auditor + implementer. Verify whether Claude Code fulfilled the Workstream Q spec, then fix any gaps yourself with minimal, dependency-ordered changes.
  </Role>

  <Constraints>
    <OS>win_amd64, linux_x86_64, macos_universal2</OS>
    <GpuBudget>&lt;= 512 MiB host-visible heap</GpuBudget>
    <Toolchain>cmake &gt;= 3.24; cargo/rustc; PyO3/maturin; Sphinx</Toolchain>
    <APIs>Primary WebGPU/WGSL; Vulkan 1.2-compatible design</APIs>
    <Safety>
      - Create a feature branch; keep commits small and scoped.
      - No blind search/replace; limit edits to listed Workstream Q files.
      - Guard features by capability checks; respect memory budget.
      - Add/update tests with each feature; don’t reduce existing coverage.
    </Safety>
  </Constraints>

  <Repo>
    <Root>.</Root>
    <Paths>
      <Path>src/</Path>
      <Path>shaders/</Path>
      <Path>python/forge3d/</Path>
      <Path>examples/</Path>
      <Path>tests/</Path>
      <Path>docs/</Path>
    </Paths>
    <Branch>
      <Create>audit/workstream-Q</Create>
    </Branch>
  </Repo>

  <SpecOfRecord name="Workstream Q — Production Features">
    <!-- Treat this section as the authoritative contract to verify against. -->
    <Task id="Q1" title="Post-processing compute pipeline (effect chain)">
      <Deliverables>
        <File>src/core/postfx.rs</File>
        <File>src/core/async_compute.rs</File>
        <File>src/core/tonemap.rs</File>
        <File>python/forge3d/postfx.py</File>
        <File>tests/test_postfx_chain.py</File>
        <File>docs/postfx/index.md</File>
        <File>examples/postfx_chain_demo.py</File>
      </Deliverables>
      <Acceptance>
        <Criterion>Chain of ≥3 effects configurable via Python (enable/disable/list).</Criterion>
        <Criterion>60 fps @ 1080p with 3 enabled effects on a mid-range GPU (record measured ms/frame).</Criterion>
        <Criterion>Visual parity with goldens (SSIM ≥ 0.98) for demo outputs.</Criterion>
      </Acceptance>
      <Dependencies>Validate C8,N3 (do not implement non-Q items).</Dependencies>
    </Task>

    <Task id="Q2" title="LOD system (impostors + continuous transitions)">
      <Deliverables>
        <File>src/terrain/impostors.rs</File>
        <File>src/terrain/lod.rs</File>
        <File>shaders/impostor_atlas.wgsl</File>
        <File>tests/test_lod_perf.py</File>
        <File>docs/terrain/lod.md</File>
        <File>examples/lod_impostors_demo.py</File>
      </Deliverables>
      <Acceptance>
        <Criterion>50–90% triangle reduction vs full-res in demo scene.</Criterion>
        <Criterion>LOD update budget &lt; 16 ms across a scripted camera sweep.</Criterion>
        <Criterion>No visible popping during transitions (document morph/impostor path).</Criterion>
      </Acceptance>
      <Dependencies>Validate B12,O4 are present/wired (no cross-workstream changes).</Dependencies>
    </Task>

    <Task id="Q3" title="GPU profiling markers & timestamp queries">
      <Deliverables>
        <File>src/core/gpu_timing.rs</File>
        <File>src/core/hdr.rs</File>
        <File>src/pipeline/hdr_offscreen.rs</File>
        <File>src/terrain/lod.rs</File>
        <File>src/vector/indirect.rs</File>
        <File>python/forge3d/gpu_metrics.py</File>
        <File>tests/test_gpu_timestamps.py</File>
        <File>docs/production/gpu_profiling.md</File>
      </Deliverables>
      <Acceptance>
        <Criterion>Timestamps visible in RenderDoc/Nsight/RGP captures.</Criterion>
        <Criterion>&lt; 1% frame-time overhead with markers enabled (median of 60 runs).</Criterion>
        <Criterion>Python surface returns structured per-pass GPU timings.</Criterion>
      </Acceptance>
      <Dependencies>Validate G3,G4 only.</Dependencies>
    </Task>

    <Task id="Q4" title="Indirect draw support (validation-only)">
      <Deliverables>None new (confirm present & wired as a dependency for Q2).</Deliverables>
      <Acceptance><Criterion>Evidence of working GPU-driven/indirect path (code pointers + quick sanity run).</Criterion></Acceptance>
    </Task>

    <Task id="Q5" title="Bloom (bright-pass + separable blur + additive composite)">
      <Deliverables>
        <File>shaders/bloom_brightpass.wgsl</File>
        <File>shaders/bloom_blur_h.wgsl</File>
        <File>shaders/bloom_blur_v.wgsl</File>
        <File>src/core/postfx.rs</File>
        <File>python/forge3d/postfx.py</File>
        <File>tests/test_postfx_bloom.py</File>
        <File>docs/postfx/index.md</File>
        <File>examples/bloom_demo.py</File>
      </Deliverables>
      <Acceptance>
        <Criterion>Controls: threshold, strength, sigma/radius exposed via Python.</Criterion>
        <Criterion>Cost ≤ 1–3 ms @ 1080p on mid-range GPU; passes golden checks (no halo on mid-tones).</Criterion>
      </Acceptance>
      <Dependencies>Requires Q1 effect chain; validate N8 only.</Dependencies>
    </Task>
  </SpecOfRecord>

  <AuditPlan>
    <Step>Enumerate repo tree and check presence of every Deliverables file per task.</Step>
    <Step>Within present files, statically grep for key symbols/APIs:
      - Q1: a PostFX chain manager class/module; Python API: enable/disable/list.
      - Q2: impostor generator, morph/continuous transitions, atlas WGSL entry points.
      - Q3: timestamp QuerySet usage; resolve; Python get_gpu_metrics().
      - Q5: bright-pass and H/V blur WGSL; composite stage; Python controls.
    </Step>
    <Step>Run builds/tests/docs:
      - maturin develop --release
      - cargo build --release
      - pytest -q tests/test_gpu_timestamps.py tests/test_postfx_chain.py tests/test_postfx_bloom.py tests/test_lod_perf.py
      - (docs) cd docs &amp;&amp; make html
    </Step>
    <Step>Run demo scripts headless to generate artifacts:
      - python examples/postfx_chain_demo.py --width 1920 --height 1080 --effects bloom,tonemap,aa --out reports/postfx.png
      - python examples/bloom_demo.py --width 1920 --height 1080 --threshold 1.0 --strength 0.6 --out reports/bloom.png
      - python examples/lod_impostors_demo.py --sweep --record reports/q_lod_metrics.json
    </Step>
    <Step>Compute metrics for AC: fps/ms from logs; SSIM against goldens; triangle reduction; GPU timing overhead.</Step>
    <Step>Produce WORKSTREAM_Q_AUDIT.md: a matrix of Deliverables/AC per task with PASS/FAIL and evidence (paths, numbers, screenshots).</Step>
  </AuditPlan>

  <ImplementationPlan condition="If any Deliverable/Acceptance FAILS">
    <Branch>
      <Create>fix/workstream-Q</Create>
      <Base>audit/workstream-Q</Base>
    </Branch>

    <Order>Q3 → Q1 → Q5 → Q2 (Q4 is validation-only)</Order>

    <Q3>
      <Action>Create src/core/gpu_timing.rs with timestamp QuerySet helpers; plumb markers into HDR, terrain LOD, vector passes; resolve timings to buffer.</Action>
      <Action>Expose python/forge3d/gpu_metrics.py: Renderer.get_gpu_metrics() returning structured JSON.</Action>
      <Action>Add tests/test_gpu_timestamps.py; docs/production/gpu_profiling.md with capture instructions.</Action>
    </Q3>

    <Q1>
      <Action>Implement src/core/postfx.rs effect-chain manager (ping-pong/temporal resources); integrate with src/core/async_compute.rs &amp; tonemap.</Action>
      <Action>Add python/forge3d/postfx.py with enable(name, **kwargs), disable(name), list().</Action>
      <Action>Add tests/test_postfx_chain.py; examples/postfx_chain_demo.py; docs/postfx/index.md.</Action>
    </Q1>

    <Q5 dependsOn="Q1">
      <Action>Add shaders/bloom_brightpass.wgsl, bloom_blur_h.wgsl, bloom_blur_v.wgsl; composite before tonemap.</Action>
      <Action>Expose threshold/strength/sigma via python/forge3d/postfx.py; write tests/test_postfx_bloom.py; examples/bloom_demo.py; update docs/postfx/index.md.</Action>
    </Q5>

    <Q2>
      <Action>Add src/terrain/impostors.rs and shaders/impostor_atlas.wgsl; integrate impostors &amp; morphing into src/terrain/lod.rs.</Action>
      <Action>Create examples/lod_impostors_demo.py and tests/test_lod_perf.py; docs/terrain/lod.md.</Action>
    </Q2>

    <Common>
      <Action>Respect ≤512 MiB host-visible budget for intermediate post-FX/LOD buffers; add assertions/telemetry.</Action>
      <Action>Update Sphinx ToC to include production/gpu_profiling, postfx, terrain/lod.</Action>
      <Action>Re-run the AuditPlan build/tests/demos; update WORKSTREAM_Q_AUDIT.md to PASS with evidence.</Action>
      <Action>Open a PR titled "Workstream Q — Close gaps (Q1,Q2,Q3,Q5)" mapping each Deliverable/AC to commits and artifacts.</Action>
    </Common>
  </ImplementationPlan>

  <Commands>
    <Build>
      <Cmd>maturin develop --release</Cmd>
      <Cmd>cargo build --release</Cmd>
    </Build>
    <Test>
      <Cmd>cargo test -q</Cmd>
      <Cmd>pytest -q tests/test_gpu_timestamps.py tests/test_postfx_chain.py tests/test_postfx_bloom.py tests/test_lod_perf.py</Cmd>
    </Test>
    <Docs>
      <Cmd>cd docs &amp;&amp; make html</Cmd>
    </Docs>
    <Demos>
      <Cmd>python examples/postfx_chain_demo.py --width 1920 --height 1080 --effects bloom,tonemap,aa --out reports/postfx.png</Cmd>
      <Cmd>python examples/bloom_demo.py --width 1920 --height 1080 --threshold 1.0 --strength 0.6 --out reports/bloom.png</Cmd>
      <Cmd>python examples/lod_impostors_demo.py --sweep --record reports/q_lod_metrics.json</Cmd>
    </Demos>
  </Commands>

  <Outputs>
    <File>WORKSTREAM_Q_AUDIT.md</File>
    <Dir>reports/ (png, json, logs)</Dir>
    <PR>
      <Title>Workstream Q — Verification &amp; Gap Closure</Title>
      <Body>Includes matrix of Deliverables/AC → PASS evidence, metrics tables, screenshots, and links to code changes.</Body>
    </PR>
  </Outputs>
</codex-job>
