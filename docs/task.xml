<task>
  <Title>Implement & wire missing/partial items for Workstream Q</Title>

  <Inputs>
    <RepoRoot>.</RepoRoot>
    <Paths>
      <Path>src/</Path>
      <Path>shaders/</Path>
      <Path>python/forge3d/</Path>
      <Path>examples/</Path>
      <Path>tests/</Path>
      <Path>docs/</Path>
    </Paths>
    <Workstream id="Q" title="Production Features">
      <Task id="Q1" title="Post-processing compute pipeline"/>
      <Task id="Q2" title="LOD system implementation"/>
      <Task id="Q3" title="GPU profiling markers"/>
      <Task id="Q4" title="Indirect draw support (dependency validation only)"/>
      <Task id="Q5" title="Bloom post-process (bright-pass + separable blur + add)"/>
    </Workstream>
  </Inputs>

  <Constraints>
    <OS>win_amd64</OS>
    <OS>linux_x86_64</OS>
    <OS>macos_universal2</OS>
    <GpuBudget>&lt;= 512 MiB host-visible heap</GpuBudget>
    <Toolchain>cmake &gt;= 3.24, cargo/rustc, PyO3, VMA, Sphinx</Toolchain>
    <APIs>Primary: WebGPU/WGSL; Vulkan 1.2 compatible design</APIs>
  </Constraints>

  <Plan>
    <Step index="0" title="Audit-first & branch setup">
      <Action>git checkout -b feat/workstream-Q</Action>
      <Action>Inventory current Q-related files (async_compute, tonemap, terrain LOD, vector indirect).</Action>
      <Action>Record evidence of dependencies mentioned in CSV: Q1 depends on C8,N3; Q2 on B12,O4; Q3 on G3,G4; Q5 on N8,Q1. Do NOT implement non-Q workstreams; only validate presence.</Action>
    </Step>

    <Step index="1" title="Validate Q4 (no code changes)">
      <Action>Confirm indirect rendering &amp; GPU/CPU culling are present and wired; note as satisfied dependency for Q2.</Action>
    </Step>

    <Step index="2" title="Q3 — GPU profiling markers & timestamp queries (Absent → Present & Wired)">
      <CreateFile>src/core/gpu_timing.rs</CreateFile>
      <ModifyFile>src/core/hdr.rs</ModifyFile>
      <ModifyFile>src/pipeline/hdr_offscreen.rs</ModifyFile>
      <ModifyFile>src/terrain/lod.rs</ModifyFile>
      <ModifyFile>src/vector/indirect.rs</ModifyFile>
      <CreateFile>python/forge3d/gpu_metrics.py</CreateFile>
      <CreateFile>tests/test_gpu_timestamps.py</CreateFile>
      <CreateFile>docs/production/gpu_profiling.md</CreateFile>
      <Design>
        <Item>Create timestamp QuerySet; insert begin/end markers around HDR, tonemap, terrain LOD update, vector passes.</Item>
        <Item>Resolve to buffer and expose structured timings via Python: Renderer.get_gpu_metrics()</Item>
        <Item>Optional guarded pipeline-statistics queries when supported.</Item>
      </Design>
      <Dependencies>G3,G4 (validate only)</Dependencies>
    </Step>

    <Step index="3" title="Q1 — Post-processing compute pipeline (Partial → Present & Wired)">
      <CreateFile>src/core/postfx.rs</CreateFile>
      <ModifyFile>src/core/async_compute.rs</ModifyFile>
      <ModifyFile>src/core/tonemap.rs</ModifyFile>
      <CreateFile>python/forge3d/postfx.py</CreateFile>
      <CreateFile>tests/test_postfx_chain.py</CreateFile>
      <CreateFile>docs/postfx/index.md</CreateFile>
      <Design>
        <Item>Effect-chain manager (enqueue compute passes, ping-pong/temporal resources, parameter block).</Item>
        <Item>Python API: postfx.enable(name, **kwargs), postfx.disable(name), postfx.list()</Item>
      </Design>
      <Dependencies>C8,N3 (validate only)</Dependencies>
    </Step>

    <Step index="4" title="Q5 — Bloom (Absent → Present & Wired)">
      <CreateFile>shaders/bloom_brightpass.wgsl</CreateFile>
      <CreateFile>shaders/bloom_blur_h.wgsl</CreateFile>
      <CreateFile>shaders/bloom_blur_v.wgsl</CreateFile>
      <ModifyFile>src/core/postfx.rs</ModifyFile>
      <ModifyFile>python/forge3d/postfx.py</ModifyFile>
      <CreateFile>tests/test_postfx_bloom.py</CreateFile>
      <ModifyFile>docs/postfx/index.md</ModifyFile>
      <Example>examples/bloom_demo.py</Example>
      <Design>
        <Item>Thresholded bright-pass on HDR target → separable H/V blur → additive composite before tonemap.</Item>
        <Item>Python controls: threshold, strength, sigma/radius; demo toggles &amp; presets.</Item>
      </Design>
      <Dependencies>N8,Q1 (require Q1 chain in place)</Dependencies>
    </Step>

    <Step index="5" title="Q2 — LOD system (Partial → Present & Wired)">
      <CreateFile>src/terrain/impostors.rs</CreateFile>
      <ModifyFile>src/terrain/lod.rs</ModifyFile>
      <CreateFile>shaders/impostor_atlas.wgsl</CreateFile>
      <CreateFile>tests/test_lod_perf.py</CreateFile>
      <CreateFile>docs/terrain/lod.md</CreateFile>
      <Example>examples/lod_impostors_demo.py</Example>
      <Design>
        <Item>Add impostor generation/path (atlas sprites or quadtree proxies) and optional morphing for continuous transitions.</Item>
        <Item>Integrate with tiling/streaming hooks; expose metrics (triangle reduction %, update ms).</Item>
      </Design>
      <Dependencies>B12,O4 (validate O4 satisfied in Step 1)</Dependencies>
    </Step>

    <Step index="6" title="Docs, CI & packaging">
      <Action>Docs: add new pages to Sphinx ToC (production/postfx, production/gpu_profiling, terrain/lod).</Action>
      <Action>CI: run builds &amp; tests across 3 OS; include perf sanity job at 1080p for Bloom + LOD.</Action>
      <Action>Ensure maturin wheels expose postfx and gpu_metrics modules.</Action>
    </Step>

    <Step index="7" title="Final validation">
      <Action>Record metrics artifacts (JSON/markdown tables) for AC evidence.</Action>
      <Action>Open PR summarizing Q1/Q2/Q3/Q5 changes; note Q4 validated only.</Action>
    </Step>
  </Plan>

  <Deliverables>
    <ByTask id="Q1">
      <Files>
        <File>src/core/postfx.rs</File>
        <File>src/core/async_compute.rs</File>
        <File>src/core/tonemap.rs</File>
        <File>python/forge3d/postfx.py</File>
        <File>tests/test_postfx_chain.py</File>
        <File>docs/postfx/index.md</File>
        <File>examples/postfx_chain_demo.py</File>
      </Files>
      <FromCSV>Compute shader framework; effect chain; temporal resources; Python API</FromCSV>
    </ByTask>

    <ByTask id="Q2">
      <Files>
        <File>src/terrain/impostors.rs</File>
        <File>src/terrain/lod.rs</File>
        <File>shaders/impostor_atlas.wgsl</File>
        <File>tests/test_lod_perf.py</File>
        <File>docs/terrain/lod.md</File>
        <File>examples/lod_impostors_demo.py</File>
      </Files>
      <FromCSV>Mesh simplification; LOD selection; imposter generation; streaming hooks</FromCSV>
    </ByTask>

    <ByTask id="Q3">
      <Files>
        <File>src/core/gpu_timing.rs</File>
        <File>src/core/hdr.rs</File>
        <File>src/pipeline/hdr_offscreen.rs</File>
        <File>src/terrain/lod.rs</File>
        <File>src/vector/indirect.rs</File>
        <File>python/forge3d/gpu_metrics.py</File>
        <File>tests/test_gpu_timestamps.py</File>
        <File>docs/production/gpu_profiling.md</File>
      </Files>
      <FromCSV>RenderDoc/NSight/RGP markers; timestamp queries; Python metrics</FromCSV>
    </ByTask>

    <ByTask id="Q5">
      <Files>
        <File>shaders/bloom_brightpass.wgsl</File>
        <File>shaders/bloom_blur_h.wgsl</File>
        <File>shaders/bloom_blur_v.wgsl</File>
        <File>src/core/postfx.rs</File>
        <File>python/forge3d/postfx.py</File>
        <File>tests/test_postfx_bloom.py</File>
        <File>docs/postfx/index.md</File>
        <File>examples/bloom_demo.py</File>
      </Files>
      <FromCSV>Thresholded bright-pass; separable blur (H/V); composite-add; Python controls</FromCSV>
    </ByTask>
  </Deliverables>

  <AcceptanceCriteria>
    <ByTask id="Q1">
      <Criterion>60 fps @ 1080p with three enabled effects in chain.</Criterion>
      <Criterion>Visual parity with reference goldens (e.g., SSIM ≥ 0.98) and configurable via Python API.</Criterion>
    </ByTask>
    <ByTask id="Q2">
      <Criterion>50–90% triangle reduction vs full-res; smooth transitions (no visible popping).</Criterion>
      <Criterion>LOD update budget &lt; 16 ms measured across camera sweeps.</Criterion>
    </ByTask>
    <ByTask id="Q3">
      <Criterion>GPU markers visible in RenderDoc, Nsight, and RGP (sanity capture).</Criterion>
      <Criterion>&lt; 1% frame time overhead with timestamps enabled (median of 60 runs).</Criterion>
    </ByTask>
    <ByTask id="Q5">
      <Criterion>Bloom halo only on highlights (golden approval); strength/threshold controls take effect.</Criterion>
      <Criterion>End-to-end Bloom cost ≤ 1–3 ms @ 1080p on a mid-range GPU; example toggles work.</Criterion>
    </ByTask>

    <BuildAndTest>
      <Command>maturin develop --release</Command>
      <Command>cargo test -q</Command>
      <Command>pytest -q tests/test_gpu_timestamps.py</Command>
      <Command>pytest -q tests/test_postfx_chain.py</Command>
      <Command>pytest -q tests/test_postfx_bloom.py</Command>
      <Command>pytest -q tests/test_lod_perf.py</Command>
    </BuildAndTest>

    <Docs>
      <Command>cd docs &amp;&amp; make html</Command>
    </Docs>
  </AcceptanceCriteria>

  <Safety>
    <Rule>Create a feature branch; keep commits small and logically scoped.</Rule>
    <Rule>No blind search/replace; restrict edits to files listed above.</Rule>
    <Rule>Guard features with capability checks; provide CPU fallback paths when needed.</Rule>
    <Rule>Respect the ≤ 512 MiB host-visible budget for intermediate post-FX/LOD buffers.</Rule>
    <Rule>Add tests with every new feature; never reduce existing coverage.</Rule>
  </Safety>

  <Completion>
    <Summary>Q1/Q2 partials completed; Q3/Q5 implemented; Q4 validated. Post-FX chain, Bloom, GPU timings, and LOD improvements are wired, tested, and documented.</Summary>
    <Commands>
      <Command>maturin develop --release</Command>
      <Command>cargo build --release</Command>
      <Command>pytest -q tests/test_gpu_timestamps.py tests/test_postfx_chain.py tests/test_postfx_bloom.py tests/test_lod_perf.py</Command>
      <Command>python examples/bloom_demo.py --width 1920 --height 1080 --threshold 1.0 --strength 0.6</Command>
      <Command>python examples/lod_impostors_demo.py --sweep --record reports/q_lod_metrics.json</Command>
      <Command>cd docs &amp;&amp; make html</Command>
    </Commands>
  </Completion>
</task>
