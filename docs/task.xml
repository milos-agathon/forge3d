<task>
  <Title>Implement & wire missing/partial items for Workstream S</Title>

  <Inputs>
    <RepoRoot>.</RepoRoot>
    <Paths>
      <Path>src/</Path>
      <Path>python/forge3d/</Path>
      <Path>python/forge3d/adapters/</Path>
      <Path>python/forge3d/ingest/</Path>
      <Path>examples/</Path>
      <Path>tests/</Path>
      <Path>docs/</Path>
      <Path>reports/</Path>
    </Paths>
    <Workstream id="S" title="Raster IO &amp; Streaming">
      <Task id="S1" title="Rasterio windowed reads + block iterator"/>
      <Task id="S2" title="Nodata/mask → alpha propagation"/>
      <Task id="S3" title="CRS normalization via WarpedVRT + pyproj"/>
      <Task id="S4" title="xarray/rioxarray DataArray ingestion"/>
      <Task id="S5" title="Dask-chunked raster ingestion"/>
      <Task id="S6" title="Overview/LOD selection"/>
    </Workstream>
  </Inputs>

  <Constraints>
    <OS>win_amd64</OS>
    <OS>linux_x86_64</OS>
    <OS>macos_universal2</OS>
    <GpuBudget>&lt;= 512 MiB host-visible heap</GpuBudget>
    <Toolchain>cmake &gt;= 3.24, cargo/rustc, PyO3/maturin, Sphinx</Toolchain>
    <APIs>Primary WebGPU/WGSL; Vulkan 1.2-compatible design</APIs>
  </Constraints>

  <Safety>
    <Rule>Create a feature branch; keep commits small and scoped to Workstream S files.</Rule>
    <Rule>No blind search/replace; exclude build/venv/target/dist caches.</Rule>
    <Rule>Add tests with each feature; never reduce existing coverage.</Rule>
    <Rule>Optional dependencies (rasterio, xarray, dask, pyproj): gate imports; degrade gracefully when absent.</Rule>
    <Rule>Respect memory budget; avoid unnecessary materialization; prefer windowed IO and chunked compute.</Rule>
  </Safety>

  <Plan>
    <!-- Dependency-ordered: S1 base → S2 masks → S3 reprojection → S6 overviews → S4 xarray → S5 dask -->
    <Step index="0" title="Audit-first & branch setup">
      <Action>git checkout -b feat/workstream-S</Action>
      <Action>Create packages: python/forge3d/ingest/__init__.py and ensure python/forge3d/adapters/__init__.py exists.</Action>
      <Action>Add optional deps to pyproject.toml: rasterio, pyproj, xarray[complete], rioxarray, dask[array]. Mark as extras; keep base install lean.</Action>
      <Action>Do not implement cross-workstream deps (B1,B4,B7,O1,O3,O4); only validate their presence when referenced and provide guarded integration points.</Action>
    </Step>

    <Step index="1" title="S1 — Rasterio windowed reads + block iterator">
      <CreateFile>python/forge3d/adapters/rasterio_tiles.py</CreateFile>
      <Design>
        <Item>windowed_read(dataset, window, out_shape, resampling)</Item>
        <Item>block_iterator(dataset, blocksize) — yields (window, array) aligned to rasterio blocks</Item>
        <Item>Return NumPy arrays (uint8/float32) without extra copies where possible</Item>
      </Design>
      <Examples>
        <Create>examples/raster_window_demo.py</Create>
      </Examples>
      <Tests>
        <Create>tests/test_rasterio_adapter.py</Create>
      </Tests>
      <Docs>
        <Create>docs/ingest/rasterio_tiles.md</Create>
      </Docs>
    </Step>

    <Step index="2" title="S2 — Nodata/mask → alpha propagation (extends S1)">
      <ModifyFile>python/forge3d/adapters/rasterio_tiles.py</ModifyFile>
      <Design>
        <Item>extract_masks(dataset) using dataset.read_masks()/dataset.mask</Item>
        <Item>Alpha channel synthesis for RGBA outputs (nodata→alpha=0), preserving color channels</Item>
      </Design>
      <Examples>
        <Create>examples/mask_to_alpha_demo.py</Create>
      </Examples>
      <Tests>
        <Create>tests/test_mask_alpha.py</Create>
      </Tests>
      <Docs>
        <Update>docs/ingest/rasterio_tiles.md</Update>
      </Docs>
    </Step>

    <Step index="3" title="S3 — CRS normalization via WarpedVRT + pyproj">
      <CreateFile>python/forge3d/adapters/reproject.py</CreateFile>
      <Design>
        <Item>WarpedVRTWrapper(dataset, dst_crs, resampling, transform alignment)</Item>
        <Item>reproject_window(src_dataset, dst_crs, window) → array + geotransform</Item>
      </Design>
      <Examples>
        <Create>examples/reproject_window_demo.py</Create>
      </Examples>
      <Tests>
        <Create>tests/test_reproject_window.py</Create>
      </Tests>
      <Docs>
        <Create>docs/ingest/reprojection.md</Create>
      </Docs>
    </Step>

    <Step index="4" title="S6 — Overview/LOD selection (builds on S1)">
      <ModifyFile>python/forge3d/adapters/rasterio_tiles.py</ModifyFile>
      <Design>
        <Item>select_overview_level(dataset, target_resolution) using dataset.overviews()</Item>
        <Item>Read fewer bytes at low zoom via chosen overview</Item>
      </Design>
      <Examples>
        <Create>examples/overview_selection_demo.py</Create>
      </Examples>
      <Tests>
        <Create>tests/test_overview_selection.py</Create>
      </Tests>
      <Docs>
        <Create>docs/ingest/overviews.md</Create>
      </Docs>
    </Step>

    <Step index="5" title="S4 — xarray/rioxarray DataArray ingestion">
      <CreateFile>python/forge3d/ingest/xarray_adapter.py</CreateFile>
      <Design>
        <Item>ingest_dataarray(da: xarray.DataArray) — validate da.rio.crs/transform; preserve coords/attrs</Item>
        <Item>Map dimensions consistently (y,x[,band]) and dtype checks</Item>
      </Design>
      <Examples>
        <Create>examples/xarray_ingest_demo.py</Create>
      </Examples>
      <Tests>
        <Create>tests/test_xarray_ingestion.py</Create>
      </Tests>
      <Docs>
        <Create>docs/ingest/xarray.md</Create>
      </Docs>
    </Step>

    <Step index="6" title="S5 — Dask-chunked raster ingestion (guarded)">
      <CreateFile>python/forge3d/ingest/dask_adapter.py</CreateFile>
      <Design>
        <Item>ingest_dask_array(a: dask.array.Array) — plan chunks to tile grid; backpressure &amp; memory guardrails</Item>
        <Item>Avoid full materialization; pipeline peak memory under ~1.5× tile size</Item>
      </Design>
      <Examples>
        <Create>examples/dask_ingest_demo.py</Create>
      </Examples>
      <Tests>
        <Create>tests/test_dask_ingestion.py</Create>
      </Tests>
      <Docs>
        <Create>docs/ingest/dask.md</Create>
      </Docs>
    </Step>

    <Step index="7" title="Docs, CI & final PR">
      <Action>Add Sphinx ToC under “Ingestion &amp; Streaming”: rasterio_tiles, reprojection, overviews, xarray, dask.</Action>
      <Action>CI: run unit tests for S1–S6 on all three OSes with extras installed.</Action>
      <Action>Open PR “Workstream S — Raster IO &amp; Streaming (S1–S6)” mapping deliverables/AC to evidence.</Action>
    </Step>
  </Plan>

  <Deliverables>
    <ByTask id="S1">
      <Files>
        <File>python/forge3d/adapters/rasterio_tiles.py</File>
        <File>tests/test_rasterio_adapter.py</File>
        <File>examples/raster_window_demo.py</File>
        <File>docs/ingest/rasterio_tiles.md</File>
      </Files>
      <APIs>windowed_read(); block_iterator()</APIs>
    </ByTask>
    <ByTask id="S2">
      <Files>
        <File>tests/test_mask_alpha.py</File>
        <File>examples/mask_to_alpha_demo.py</File>
        <File>docs/ingest/rasterio_tiles.md</File>
      </Files>
      <APIs>extract_masks(); RGBA alpha synthesis</APIs>
    </ByTask>
    <ByTask id="S3">
      <Files>
        <File>python/forge3d/adapters/reproject.py</File>
        <File>tests/test_reproject_window.py</File>
        <File>examples/reproject_window_demo.py</File>
        <File>docs/ingest/reprojection.md</File>
      </Files>
      <APIs>WarpedVRTWrapper; reproject_window()</APIs>
    </ByTask>
    <ByTask id="S4">
      <Files>
        <File>python/forge3d/ingest/xarray_adapter.py</File>
        <File>tests/test_xarray_ingestion.py</File>
        <File>examples/xarray_ingest_demo.py</File>
        <File>docs/ingest/xarray.md</File>
      </Files>
      <APIs>ingest_dataarray()</APIs>
    </ByTask>
    <ByTask id="S5">
      <Files>
        <File>python/forge3d/ingest/dask_adapter.py</File>
        <File>tests/test_dask_ingestion.py</File>
        <File>examples/dask_ingest_demo.py</File>
        <File>docs/ingest/dask.md</File>
      </Files>
      <APIs>ingest_dask_array()</APIs>
    </ByTask>
    <ByTask id="S6">
      <Files>
        <File>tests/test_overview_selection.py</File>
        <File>examples/overview_selection_demo.py</File>
        <File>docs/ingest/overviews.md</File>
      </Files>
      <APIs>select_overview_level()</APIs>
    </ByTask>
  </Deliverables>

  <AcceptanceCriteria>
    <ByTask id="S1">
      <Criterion>Windowed reads return arrays matching requested window/out_shape; total pixels read equals expected for a scripted sweep.</Criterion>
      <Criterion>Block iterator yields block-aligned windows covering the dataset with no gaps/overlap (count &amp; extent verified).</Criterion>
      <Criterion>Resampling mode selectable and honored; parity vs rasterio for reference windows.</Criterion>
    </ByTask>
    <ByTask id="S2">
      <Criterion>Masked areas produce alpha=0 with color channels preserved; parity with rasterio mask semantics on fixtures.</Criterion>
      <Criterion>Golden-image tests pass at SSIM ≥ 0.99 for mask→alpha overlays.</Criterion>
    </ByTask>
    <ByTask id="S3">
      <Criterion>Reprojected windows align with target CRS within ≤0.5 pixel georeferencing error; visual SSIM ≥ 0.99 vs rasterio WarpedVRT reference.</Criterion>
      <Criterion>Units/CRS metadata preserved and reported (CRS string equality; transform near-equality within 1e-6).</Criterion>
    </ByTask>
    <ByTask id="S4">
      <Criterion>ingest_dataarray preserves CRS/transform (via rioxarray) and dims order (y,x[,band]); attributes retained.</Criterion>
      <Criterion>Zero unnecessary copies for C-contiguous uint8/float32 inputs (validated via numpy.shares_memory or buffer interface).</Criterion>
    </ByTask>
    <ByTask id="S5">
      <Criterion>Dask ingestion does not materialize full arrays; measured peak host memory ≤ 1.5× tile size during streaming path.</Criterion>
      <Criterion>Chunk plan aligns with tile grid; end-to-end ingest succeeds on synthetic multi-GB virtual dataset.</Criterion>
    </ByTask>
    <ByTask id="S6">
      <Criterion>At 1/8 requested resolution, chosen overview reduces bytes read by ≥60% vs full-res on a standard scene.</Criterion>
      <Criterion>Overview selection yields SSIM ≥ 0.99 vs full-res downsample at the same output resolution.</Criterion>
    </ByTask>

    <BuildAndTest>
      <Command>maturin develop --release</Command>
      <Command>pytest -q tests/test_rasterio_adapter.py tests/test_mask_alpha.py tests/test_reproject_window.py tests/test_overview_selection.py tests/test_xarray_ingestion.py tests/test_dask_ingestion.py</Command>
    </BuildAndTest>
    <Demos>
      <Command>python examples/raster_window_demo.py --out reports/s1_windows.png</Command>
      <Command>python examples/mask_to_alpha_demo.py --out reports/s2_mask.png</Command>
      <Command>python examples/reproject_window_demo.py --out reports/s3_reproject.png</Command>
      <Command>python examples/overview_selection_demo.py --out reports/s6_overviews.png</Command>
      <Command>python examples/xarray_ingest_demo.py --out reports/s4_xarray.png</Command>
      <Command>python examples/dask_ingest_demo.py --out reports/s5_dask.png</Command>
    </Demos>
    <Docs>
      <Command>cd docs &amp;&amp; make html</Command>
    </Docs>
  </AcceptanceCriteria>

  <Completion>
    <Summary>S1–S6 implemented and wired with tests, demos, and docs; optional deps handled gracefully; streaming paths respect memory budget.</Summary>
    <Commands>
      <Command>maturin develop --release</Command>
      <Command>pytest -q tests/test_rasterio_adapter.py tests/test_mask_alpha.py tests/test_reproject_window.py tests/test_overview_selection.py tests/test_xarray_ingestion.py tests/test_dask_ingestion.py</Command>
      <Command>python examples/raster_window_demo.py --out reports/s1_windows.png</Command>
      <Command>python examples/mask_to_alpha_demo.py --out reports/s2_mask.png</Command>
      <Command>python examples/reproject_window_demo.py --out reports/s3_reproject.png</Command>
      <Command>python examples/overview_selection_demo.py --out reports/s6_overviews.png</Command>
      <Command>python examples/xarray_ingest_demo.py --out reports/s4_xarray.png</Command>
      <Command>python examples/dask_ingest_demo.py --out reports/s5_dask.png</Command>
      <Command>cd docs &amp;&amp; make html</Command>
    </Commands>
  </Completion>
</task>
