<task>
  <Title>Implement & wire missing/partial items for Workstream R</Title>

  <Inputs>
    <RepoRoot>.</RepoRoot>
    <Paths>
      <Path>src/</Path>
      <Path>python/forge3d/</Path>
      <Path>shaders/</Path>
      <Path>examples/</Path>
      <Path>tests/</Path>
      <Path>docs/</Path>
    </Paths>
    <Workstream id="R" title="Matplotlib &amp; Array Interop">
      <Task id="R1" title="Matplotlib colormap + Normalize support"/>
      <Task id="R2" title="Zero-copy NumPy ingestion (buffer protocol) — validation only"/>
      <Task id="R3" title="Matplotlib normalization presets (Log/Power/Boundary)"/>
      <Task id="R4" title="Matplotlib display helpers (imshow_rgba)"/>
    </Workstream>
  </Inputs>

  <Constraints>
    <OS>win_amd64</OS>
    <OS>linux_x86_64</OS>
    <OS>macos_universal2</OS>
    <GpuBudget>&lt;= 512 MiB host-visible heap</GpuBudget>
    <Toolchain>cmake &gt;= 3.24, cargo/rustc, PyO3/maturin, Sphinx</Toolchain>
    <APIs>WebGPU/WGSL primary; Vulkan 1.2-compatible design</APIs>
  </Constraints>

  <Plan>
    <Step index="0" title="Audit-first & branch setup">
      <Action>git checkout -b feat/workstream-R</Action>
      <Action>Verify Workstream R rows in roadmap and confirm dependencies only (R1: B5,B2; R2: B1,B4; R3: N1,B5; R4: B10,E1). Do not implement non-R workstreams.</Action>
      <Action>Add optional dependency handling: make Matplotlib optional; provide graceful messages if unavailable.</Action>
    </Step>

    <Step index="1" title="R2 validation (no changes)">
      <Action>Validate zero-copy ingestion paths with existing tools (C-contiguous checks, __array_interface__, shares_memory). Record evidence.</Action>
    </Step>

    <Step index="2" title="R1 — Matplotlib colormap + base Normalize (Partial → Present & Wired)">
      <CreateFile>python/forge3d/adapters/__init__.py</CreateFile>
      <CreateFile>python/forge3d/adapters/mpl_cmap.py</CreateFile>
      <CreateFile>tests/test_mpl_cmap.py</CreateFile>
      <CreateFile>docs/integration/matplotlib.md</CreateFile>
      <Design>
        <Item>Accept Matplotlib colormap names and Colormap objects; map to forge3d internal LUT.</Item>
        <Item>Implement linear Normalize support (min/max) compatible with Matplotlib’s behavior.</Item>
        <Item>Keep imports optional; fail gracefully with install hint when Matplotlib missing.</Item>
      </Design>
      <Examples>
        <Create>examples/mpl_cmap_demo.py</Create>
      </Examples>
    </Step>

    <Step index="3" title="R3 — Matplotlib normalization presets (Absent → Present & Wired)">
      <ModifyFile>python/forge3d/adapters/mpl_cmap.py</ModifyFile>
      <CreateFile>tests/test_mpl_norms.py</CreateFile>
      <Design>
        <Item>Add LogNorm, PowerNorm (gamma), and BoundaryNorm equivalents bridging to Matplotlib semantics.</Item>
        <Item>Tolerances: numeric parity within 1e-7 on representative arrays.</Item>
      </Design>
      <Examples>
        <Create>examples/mpl_norms_demo.py</Create>
      </Examples>
    </Step>

    <Step index="4" title="R4 — Matplotlib display helpers (Absent → Present & Wired)">
      <CreateFile>python/forge3d/helpers/__init__.py</CreateFile>
      <CreateFile>python/forge3d/helpers/mpl_display.py</CreateFile>
      <CreateFile>tests/test_mpl_display.py</CreateFile>
      <Design>
        <Item>Implement imshow_rgba(ax, rgba, extent=None, dpi=None) to display forge3d RGBA buffers without copies when possible.</Item>
        <Item>Validate shape (H,W,4), dtype (uint8 or float32), orientation, aspect, and optional extent/DPI.</Item>
      </Design>
      <Examples>
        <Create>examples/mpl_imshow_demo.py</Create>
      </Examples>
    </Step>

    <Step index="5" title="Docs & CI">
      <Action>Add new pages to Sphinx ToC under Integration → Matplotlib.</Action>
      <Action>CI job: run unit tests for adapters/norms/display on 3 OSes (with Matplotlib installed).</Action>
    </Step>

    <Step index="6" title="Final validation & PR">
      <Action>Run validation runbook; capture metrics/artifacts (images, logs, SSIM tables).</Action>
      <Action>Open PR summarizing R1/R3/R4 completion and R2 validation evidence.</Action>
    </Step>
  </Plan>

  <Deliverables>
    <ByTask id="R1">
      <Files>
        <File>python/forge3d/adapters/__init__.py</File>
        <File>python/forge3d/adapters/mpl_cmap.py</File>
        <File>tests/test_mpl_cmap.py</File>
        <File>docs/integration/matplotlib.md</File>
        <File>examples/mpl_cmap_demo.py</File>
      </Files>
      <Feature>Matplotlib Colormap interop; linear Normalize mapping; optional dependency handling</Feature>
    </ByTask>

    <ByTask id="R2">
      <ValidationOnly>true</ValidationOnly>
      <Evidence>Run python/tools/profile_copies.py and existing zero-copy tests; attach logs.</Evidence>
    </ByTask>

    <ByTask id="R3">
      <Files>
        <File>tests/test_mpl_norms.py</File>
        <File>examples/mpl_norms_demo.py</File>
      </Files>
      <Feature>LogNorm / PowerNorm / BoundaryNorm parity with Matplotlib</Feature>
    </ByTask>

    <ByTask id="R4">
      <Files>
        <File>python/forge3d/helpers/__init__.py</File>
        <File>python/forge3d/helpers/mpl_display.py</File>
        <File>tests/test_mpl_display.py</File>
        <File>examples/mpl_imshow_demo.py</File>
      </Files>
      <Feature>imshow_rgba helper for forge3d RGBA buffers (extent/DPI aware)</Feature>
    </ByTask>
  </Deliverables>

  <AcceptanceCriteria>
    <ByTask id="R1">
      <Criterion>Accepts both Matplotlib colormap names and Colormap objects; produces identical RGBA (SSIM ≥ 0.999 vs Matplotlib reference on a 1024×32 ramp).</Criterion>
      <Criterion>Linear Normalize parity: max absolute channel diff ≤ 1e-7 across 10 random arrays.</Criterion>
      <Criterion>Optional dependency: importing forge3d without Matplotlib succeeds and shows a clear usage hint when adapter APIs are called.</Criterion>
    </ByTask>

    <ByTask id="R3">
      <Criterion>LogNorm/PowerNorm/BoundaryNorm parity vs Matplotlib within 1e-7 across representative inputs (including edge cases: zeros, negatives filtered for LogNorm, custom boundaries).</Criterion>
      <Criterion>Unit tests cover ≥90% of adapter branches (norm paths, dtype/shape guards).</Criterion>
    </ByTask>

    <ByTask id="R4">
      <Criterion>imshow_rgba displays a forge3d RGBA buffer with correct orientation/aspect; extent/DPI parameters respected (checked via pixel probes).</Criterion>
      <Criterion>No unintended copies for C-contiguous uint8 inputs (validated via memory check or profiler hook).</Criterion>
    </ByTask>

    <BuildAndTest>
      <Command>maturin develop --release</Command>
      <Command>pytest -q tests/test_mpl_cmap.py tests/test_mpl_norms.py tests/test_mpl_display.py</Command>
    </BuildAndTest>
    <Docs>
      <Command>cd docs &amp;&amp; make html</Command>
    </Docs>
    <Demos>
      <Command>python examples/mpl_cmap_demo.py --out reports/r1_cmap.png</Command>
      <Command>python examples/mpl_norms_demo.py --out reports/r3_norms.png</Command>
      <Command>python examples/mpl_imshow_demo.py --out reports/r4_imshow.png</Command>
    </Demos>
  </AcceptanceCriteria>

  <Safety>
    <Rule>Create a feature branch; keep commits small and scoped.</Rule>
    <Rule>No blind search/replace; restrict edits to the files listed.</Rule>
    <Rule>Matplotlib is optional; all adapters must degrade gracefully when absent.</Rule>
    <Rule>Respect memory budget; avoid unnecessary array copies; prefer zero-copy paths.</Rule>
    <Rule>Add tests with every feature; do not reduce existing coverage.</Rule>
  </Safety>

  <Completion>
    <Summary>R1 (interop + linear Normalize), R3 (Log/Power/Boundary presets), and R4 (display helpers) are implemented, tested, documented; R2 validated.</Summary>
    <Commands>
      <Command>maturin develop --release</Command>
      <Command>pytest -q tests/test_mpl_cmap.py tests/test_mpl_norms.py tests/test_mpl_display.py</Command>
      <Command>python examples/mpl_cmap_demo.py --out reports/r1_cmap.png</Command>
      <Command>python examples/mpl_norms_demo.py --out reports/r3_norms.png</Command>
      <Command>python examples/mpl_imshow_demo.py --out reports/r4_imshow.png</Command>
      <Command>cd docs &amp;&amp; make html</Command>
    </Commands>
  </Completion>
</task>
