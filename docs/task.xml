<task>
  <title>Implement & wire missing/partial items for Workstream V</title>

  <inputs>
    <repoRoot>./</repoRoot>
    <paths>
      <path>src/</path>
      <path>shaders/</path>
      <path>python/forge3d/</path>
      <path>python/forge3d/adapters/</path>
      <path>examples/</path>
      <path>tests/</path>
      <path>docs/</path>
      <path>.github/workflows/</path>
    </paths>
    <workstream id="V" title="Datashader Interop">
      <item id="V1" title="Datashader pipeline → RGBA overlay"/>
      <item id="V2" title="Datashader performance stress &amp; goldens"/>
    </workstream>
  </inputs>

  <constraints>
    <platforms>win_amd64, linux_x86_64, macos_universal2</platforms>
    <gpuBudget>≤ 512 MiB host-visible heap</gpuBudget>
    <build>cmake≥3.24, cargo/rustc, PyO3, VMA</build>
    <apis>Primary: WebGPU/WGSL; Vulkan 1.2-compatible design</apis>
    <docs>Sphinx</docs>
    <scope>Only Workstream V tasks; do not modify other workstreams</scope>
  </constraints>

  <safety>
    <step>Create branch: <code>git checkout -b feat/workstream-v-datashader</code></step>
    <step>Audit-first: list and diff only files under <code>python/forge3d/adapters</code>, <code>examples</code>, <code>tests</code>, <code>docs</code>, <code>.github/workflows</code>.</step>
    <step>No blind search/replace; avoid binary directories; small, reviewable commits.</step>
    <step>Treat Datashader as optional dependency; gate imports with availability checks.</step>
  </safety>

  <plan>
    <!-- Dependency awareness from roadmap.csv -->
    <!-- V1 depends on N2;O3 (advanced rendering systems, resource mgmt) – preflight only. -->
    <!-- V2 depends on R1;G7 (matplotlib interop, perf testing) – preflight only. -->
    <step id="P0">Preflight checks:
      <item>Verify adapter framework present (e.g., <code>python/forge3d/adapters/__init__.py</code>).</item>
      <item>Non-blocking asserts that referenced deps (N2,O3,R1,G7) exist; if missing, proceed with V work using internal shims/tests only.</item>
      <item>Add dev extra: <code>pip install datashader</code> documented, but keep core package import-safe without datashader installed.</item>
    </step>

    <step id="V1-1">Implement adapter:
      <item>Create <code>python/forge3d/adapters/datashader_adapter.py</code> with class <code>DatashaderAdapter</code>.</item>
      <item>Functions: <code>is_datashader_available()</code>, <code>rgba_view_from_agg(agg_or_img)</code> (zero-copy numpy RGBA view), <code>validate_alignment(extent, transform, width, height)</code>, <code>to_overlay_texture(rgba, extent)</code>.</item>
      <item>Zero-copy contract: ensure <code>np.shares_memory</code> true where possible; fallback path allowed with explicit copy counter.</item>
    </step>

    <step id="V1-2">Wire exports:
      <item>Update <code>python/forge3d/adapters/__init__.py</code> to export adapter + availability probe.</item>
      <item>Update <code>python/forge3d/__init__.py</code> to expose entry points under a stable namespace (e.g., <code>forge3d.adapters.datashader_adapter</code>).</item>
    </step>

    <step id="V1-3">Examples:
      <item>Add <code>examples/datashader_overlay_demo.py</code> demonstrating millions-of-points pipeline producing an RGBA overlay aligned to geographic extent and composited in forge3d.</item>
      <item>Output assets: <code>examples/output/datashader_overlay_demo.png</code>, JSON metadata for extent.</item>
    </step>

    <step id="V1-4">Unit &amp; integration tests:
      <item>Create <code>tests/test_datashader_adapter.py</code> with:
        <subitem>Zero-copy assertion using <code>np.shares_memory</code> for RGBA buffer.</subitem>
        <subitem>Alignment validation: pixel center offset ≤ 0.5 px over synthetic extents.</subitem>
        <subitem>Adapter works when Datashader missing (skipped tests) and when present.</subitem>
      </item>
    </step>

    <step id="V2-1">Perf infra &amp; goldens:
      <item>Create <code>tests/perf/</code> and <code>tests/goldens/</code>.</item>
      <item>Add <code>tests/perf/test_datashader_zoom.py</code>:
        <subitem>Generate deterministic synthetic data with fixed seed.</subitem>
        <subitem>Render at zoom levels Z0,Z4,Z8,Z12 to images; compare to goldens via SSIM.</subitem>
        <subitem>Measure frame time per zoom; collect peak RSS; assert thresholds.</subitem>
      </item>
      <item>Generate initial goldens: <code>tests/goldens/datashader_Z*.png</code> + sidecar JSON (params, hash).</item>
    </step>

    <step id="V2-2">CI wiring:
      <item>Add <code>.github/workflows/datashader-perf.yml</code> (linux_x86_64 runner) to run perf tests on push/PR; upload diffs on regression.</item>
      <item>Matrix pin Datashader version(s) to control drift; cache build artifacts.</item>
    </step>

    <step id="DOCS">Docs:
      <item>Add Sphinx page <code>docs/user/datashader_interop.rst</code> with usage, zero-copy notes, limits, and memory guidance.</item>
      <item>Link from docs TOC; include code snippets from the example.</item>
    </step>

    <step id="FINAL">Finalization:
      <item>Run full test subset: <code>pytest -k "datashader" -v</code>.</item>
      <item>Build docs: <code>cd docs &amp;&amp; make html</code>.</item>
      <item>Open PR with summary, perf table, and goldens diff preview.</item>
    </step>
  </plan>

  <deliverables>
    <item>python/forge3d/adapters/datashader_adapter.py</item>
    <item>python/forge3d/adapters/__init__.py (updated)</item>
    <item>python/forge3d/__init__.py (updated exports)</item>
    <item>examples/datashader_overlay_demo.py</item>
    <item>examples/output/datashader_overlay_demo.png</item>
    <item>tests/test_datashader_adapter.py</item>
    <item>tests/perf/test_datashader_zoom.py</item>
    <item>tests/goldens/datashader_Z{0,4,8,12}.png + metadata JSON</item>
    <item>.github/workflows/datashader-perf.yml</item>
    <item>docs/user/datashader_interop.rst</item>
  </deliverables>

  <acceptanceCriteria>
    <!-- From roadmap.csv (lightly normalized to be measurable) -->
    <item>V1: Datashader RGBA arrays accepted without copy: unit test asserts <code>np.shares_memory(adapter_rgba, src_rgba) == True</code> for shaded output shapes (H,W,4) uint8.</item>
    <item>V1: Overlay aligns with coordinates: alignment error ≤ 0.5 px over provided extent/transform; test passes across two synthetic extents.</item>
    <item>V1: Example renders: running <code>python examples/datashader_overlay_demo.py</code> writes <code>examples/output/datashader_overlay_demo.png</code> and prints "OK".</item>
    <item>V2: SSIM ≥ 0.98 vs goldens across zoom levels Z0,Z4,Z8,Z12 using <code>skimage.metrics.structural_similarity</code>.</item>
    <item>V2: Frame time ≤ 33 ms at Z8 on linux_x86_64 (reference runner) for the synthetic 1e6-point scene; trend captured for other zooms.</item>
    <item>V2: CI uploads diff images on regression and fails the job when SSIM &lt; 0.98 or frame time target exceeded.</item>
    <item>All: Peak RSS during tests ≤ 512 MiB; tests skip gracefully if datashader is not installed.</item>
    <item>Docs build without warnings and new page appears in the TOC.</item>
  </acceptanceCriteria>

  <completion>
    <summary>Implements Workstream V by adding a Datashader adapter, examples, tests, goldens, and CI to ensure correctness and performance within memory budget.</summary>
    <commands>
      <cmd>pip install -e .[dev] datashader</cmd>
      <cmd>maturin develop --release</cmd>
      <cmd>pytest tests/test_datashader_adapter.py -v</cmd>
      <cmd>pytest tests/perf/test_datashader_zoom.py -v</cmd>
      <cmd>python examples/datashader_overlay_demo.py</cmd>
      <cmd>cd docs &amp;&amp; make html</cmd>
    </commands>
  </completion>
</task>
