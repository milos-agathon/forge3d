<task>
  <title>Implement & wire missing/partial items for Workstream A</title>

  <role>Senior graphics/runtime engineer</role>

  <inputs>
    <repoRoot>.</repoRoot>
    <paths>
      <path>src/</path>
      <path>src/shaders/</path>
      <path>src/path_tracing/</path>
      <path>python/forge3d/</path>
      <path>examples/</path>
      <path>docs/</path>
    </paths>
    <workstream id="A" title="Path Tracing (WebGPU Compute)">
      <!-- Only tasks not Present & Wired per audit_A.md -->
      <task id="A2">Material Models v1</task>
      <task id="A3">Triangle Mesh + BVH</task>
      <task id="A4">Light Sampling &amp; MIS</task>
      <task id="A5">Denoiser (A-trous/SVGF)</task>
      <task id="A6">Dielectric Water (offline)</task>
      <task id="A7">LBVH/SAH Builder &amp; Refit</task>
      <task id="A8">ReSTIR DI</task>
      <task id="A9">PBR Textures in PT</task>
      <task id="A10">SDF Primitives &amp; CSG</task>
      <task id="A11">Participating Media (Single Scatter)</task>
      <task id="A12">Wavefront Path Tracer</task>
      <task id="A13">Path Guiding</task>
      <task id="A16">QMC &amp; Adaptive Sampler (f16-ready)</task>
      <task id="A20">Soft Area Lights Param</task>
      <task id="A21">Ambient Occlusion Integrator (Offline)</task>
      <task id="A22">Instanced Geometry (PT)</task>
      <task id="A23">Hair BSDF + Curve Prims (PT)</task>
      <task id="A24">Anisotropic Microfacet BRDF</task>
      <task id="A25">Object Importance Sampling</task>
    </workstream>
  </inputs>

  <constraints>
    <platforms>win_amd64, linux_x86_64, macos_universal2</platforms>
    <gpuBudget>&lt;= 512 MiB host-visible heap</gpuBudget>
    <build>cmake >= 3.24, cargo/rustc, PyO3, VMA</build>
    <apis>WebGPU/WGSL primary; Vulkan 1.2-compatible design</apis>
    <docs>Sphinx</docs>
  </constraints>

  <safety>
    <branch>Create feature branch: <code>wsA-wireup</code></branch>
    <auditFirst>Read <code>roadmap2.csv</code> + <code>audit_A.md</code> to confirm task list; no edits to other workstreams.</auditFirst>
    <search>Restrict code modifications to listed paths; exclude build outputs (<code>target/</code>, <code>dist/</code>, <code>_build/</code>).</search>
    <noBlindEdits>No blind search/replace; prefer targeted diffs with tests.</noBlindEdits>
    <commits>Small, dependency-ordered commits; reference task IDs in messages (e.g., “A4: wire MIS into shade”).</commits>
  </safety>

  <plan>
    <!-- Dependency-ordered wiring derived from audit evidence -->
    <step id="P0">Set up branch, run baseline builds/tests to capture reference outputs and VRAM usage.</step>

    <step id="P1">Materials &amp; Textures Core (A2, A9, A24)
      <actions>
        <action>In <code>src/shaders/pt_shade.wgsl</code>, implement Lambertian, GGX metal, dielectric; add anisotropic αx/αy tangent-frame sampling.</action>
        <action>Extend scene/material buffers in <code>src/path_tracing/compute.rs</code>; plumb params to kernels.</action>
        <action>Expose material controls in <code>python/forge3d/path_tracing.py</code> aligning with PT params.</action>
      </actions>
    </step>

    <step id="P2">Mesh Traversal &amp; Instances (A3, A22, A7)
      <actions>
        <action>Replace dummy mesh buffers with actual mesh/BVH in <code>src/path_tracing/compute.rs</code>; upload via <code>src/path_tracing/mesh.rs</code>.</action>
        <action>Finalize <code>src/shaders/pt_intersect_mesh.wgsl</code> traversal/hit layout to match host structs; add LBVH/SAH builder/refit entry in <code>src/path_tracing/accel.rs</code>.</action>
        <action>Add instance buffer + transforms; TLAS-style indirection for shared BLAS.</action>
      </actions>
    </step>

    <step id="P3">Direct Lighting &amp; Many Lights (A4, A20, A25, A8)
      <actions>
        <action>Implement NEE + MIS for env/area lights; add balanced weights in shade.</action>
        <action>Wire soft area light parameters and sampling model (<code>src/shaders/lighting_area.wgsl</code>).</action>
        <action>Add per-object importance tags; integrate MIS weighting tweaks.</action>
        <action>Integrate ReSTIR DI reservoirs (temporal + spatial reuse) with alias tables; connect into the direct-lighting stage.</action>
      </actions>
    </step>

    <step id="P4">Mediums &amp; Wavefront &amp; Denoise (A11, A12, A5)
      <actions>
        <action>Single-scatter participating media: HG phase eval + medium params buffer; export API entry.</action>
        <action>Expose wavefront PT public API; schedule stages raygen → intersect → shade → scatter → compact/terminate.</action>
        <action>Finalize SVGF passes; thread AOVs (albedo/normal/depth) through to denoiser; add bindings.</action>
      </actions>
    </step>

    <step id="P5">Special Integrators &amp; Geometry (A21, A23, A10, A6)
      <actions>
        <action>Add fast AO/bent normals offline integrator; half-precision G-buffer path.</action>
        <action>Implement hair BSDF (Kajiya-Kay/Marschner) + curve primitives (bezier ribbons/tubes) with proper widths.</action>
        <action>Ensure SDF/CSG primitives participate in PT intersectors consistently.</action>
        <action>Implement dielectric water model (Beer–Lambert, Fresnel; rough surface BRDF) for offline.</action>
      </actions>
    </step>

    <step id="P6">Sampling Quality (A16)
      <actions>
        <action>Add Sobol/Owen QMC sequence per-pixel in <code>pt_raygen.wgsl</code>; uniform-controlled adaptive sampling threshold.</action>
      </actions>
    </step>

    <step id="P7">Examples, Tests, Docs
      <actions>
        <action>Add/repair examples: <code>examples/wavefront_cornell.py</code>, <code>examples/restir_many_lights.py</code>, <code>examples/progressive_tiling.py</code>.</action>
        <action>Unit/integration tests for material params, mesh hits, ReSTIR reservoirs, SVGF outputs, and AO integrator.</action>
        <action>Update Sphinx docs: API pages for new/updated features; add runbook.</action>
      </actions>
    </step>
  </plan>

  <deliverables>
    <!-- Pulled from roadmap2.csv cells (normalized) -->
    <item>A2: Lambertian, GGX metal, dielectric (IOR), emissive; env sampling.</item>
    <item>A3: Mesh PT traversal with CPU BVH build.</item>
    <item>A4: NEE + MIS for area/env.</item>
    <item>A5: Edge-aware denoise to speed convergence.</item>
    <item>A6: Beer–Lambert + Fresnel; rough water.</item>
    <item>A7: GPU LBVH build + CPU SAH fallback; refit.</item>
    <item>A8: Reservoir sampling for many lights.</item>
    <item>A9: Albedo/metallic/roughness/normal/emissive.</item>
    <item>A10: SDF/CSG support in PT path.</item>
    <item>A11: Single-scatter HG; medium params.</item>
    <item>A12: Wavefront PT orchestration.</item>
    <item>A13: Path guiding scaffolding in PT.</item>
    <item>A16: QMC/Owen + adaptive sampler.</item>
    <item>A20: Area-light parameters + sampling.</item>
    <item>A21: AO + bent normals offline integrator.</item>
    <item>A22: TLAS-style instances; per-instance transforms.</item>
    <item>A23: Hair BSDF + curve primitives.</item>
    <item>A24: Anisotropic GGX/Beckmann (αx/αy).</item>
    <item>A25: Per-object importance hints.</item>
    <item>Docs: Updated Sphinx pages; example scripts runnable.</item>
    <item>Tests: Integration tests for materials, mesh/instances, ReSTIR, SVGF, AO.</item>
  </deliverables>

  <acceptanceCriteria>
    <!-- Measurable checks per CSV -->
    <item>A2: BSDF eval/sample implemented; env/sky sampler; parameters exposed via Python API.</item>
    <item>A3: Watertight triangle intersector; BVH layout documented; GPU traversal validated on mesh scene.</item>
    <item>A4: Balance heuristic for BSDF/light paths; env importance sampling active (visible in debug AOVs).</item>
    <item>A5: AOVs (albedo/normal/depth) feed denoiser; SVGF outputs non-NaN and reduce variance on Cornell box.</item>
    <item>A6: Absorption/IOR parameters respected; roughness BRDF matches expected energy behavior.</item>
    <item>A7: Morton coding + radix sort present; refit supports motion without rebuild.</item>
    <item>A8: Temporal + spatial reuse wired; alias tables built per-frame; reservoirs stable across frames.</item>
    <item>A9: Filtered texture lookups in compute; tangent frame correct for normal mapping.</item>
    <item>A10: SDF/CSG shapes intersect and shade in PT path with parity to raster baseline.</item>
    <item>A11: HG phase evaluation and single-scatter estimate produce plausible transmittance; medium params buffer plumbed.</item>
    <item>A12: Public wavefront API schedules raygen → intersect → shade → scatter → compact; example runs headlessly.</item>
    <item>A13: Path guiding hooks available; no regression to MIS/ReSTIR logic.</item>
    <item>A16: Sobol/Owen sequence selectable; adaptive sampling threshold adjustable via uniform; no precision issues in f16 path.</item>
    <item>A20: Area-light sampling matches analytic reference; MIS weights consistent.</item>
    <item>A21: AO output + bent normals available as AOVs; half-precision G-buffer path exercised.</item>
    <item>A22: Shared BLAS with instance transforms; instance buffer correctly indexed in kernels.</item>
    <item>A23: Curve widths respected; hair pigments shaded with chosen model.</item>
    <item>A24: Tangent-space anisotropic sampling validated (αx/αy); visual lobe orientation matches tangent frame.</item>
    <item>A25: Per-object importance influences sampling; MIS remains unbiased.</item>
    <item>Global: Repo builds on 3 OS; headless PT render fits ≤512 MiB VRAM for 1024×1024 @ 64 spp; examples execute without error.</item>
  </acceptanceCriteria>

  <completion>
    <summary>All above items wired from “Partial/Absent” to “Present &amp; Wired,” with tests/docs updated. No unrelated workstreams touched.</summary>
    <commands>
      <cmd>git checkout -b wsA-wireup</cmd>
      <cmd>cargo build --all-features</cmd>
      <cmd>pip install -e .</cmd>
      <cmd>python -c "import forge3d.path_tracing as pt; t=pt.PathTracer(256,256,seed=2); t.render_rgba(spp=1)"</cmd>
      <cmd>python examples/progressive_tiling.py</cmd>
      <cmd>python examples/restir_many_lights.py</cmd>
      <cmd>python - &lt;&lt;'PY'\nfrom forge3d.path_tracing import render_aovs; a=render_aovs(64,64,None,seed=1); print(sorted(a.keys()))\nPY</cmd>
      <cmd>sphinx-build -b html docs _build/html</cmd>
      <cmd>pytest -q || true</cmd>
    </commands>
  </completion>
</task>